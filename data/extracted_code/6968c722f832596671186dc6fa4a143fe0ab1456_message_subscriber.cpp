        CASE_RELAY_MESSAGE(reader, version, address);
        CASE_RELAY_MESSAGE(reader, version, alert);
        CASE_HANDLE_MESSAGE(reader, version, block);
        CASE_RELAY_MESSAGE(reader, version, block_transactions);
        CASE_RELAY_MESSAGE(reader, version, compact_block);
        CASE_RELAY_MESSAGE(reader, version, double_spend_proof);
        CASE_RELAY_MESSAGE(reader, version, fee_filter);
        CASE_RELAY_MESSAGE(reader, version, filter_add);
        CASE_RELAY_MESSAGE(reader, version, filter_clear);
        CASE_RELAY_MESSAGE(reader, version, filter_load);
        CASE_RELAY_MESSAGE(reader, version, get_address);
        CASE_RELAY_MESSAGE(reader, version, get_blocks);
        CASE_RELAY_MESSAGE(reader, version, get_block_transactions);
        CASE_RELAY_MESSAGE(reader, version, get_data);
        CASE_RELAY_MESSAGE(reader, version, get_headers);
        CASE_RELAY_MESSAGE(reader, version, headers);
        CASE_RELAY_MESSAGE(reader, version, inventory);
        CASE_RELAY_MESSAGE(reader, version, memory_pool);
        CASE_RELAY_MESSAGE(reader, version, merkle_block);
        CASE_RELAY_MESSAGE(reader, version, not_found);
        CASE_RELAY_MESSAGE(reader, version, ping);
        CASE_RELAY_MESSAGE(reader, version, pong);
        CASE_RELAY_MESSAGE(reader, version, reject);
        CASE_RELAY_MESSAGE(reader, version, send_compact);
        CASE_RELAY_MESSAGE(reader, version, send_headers);
        CASE_HANDLE_MESSAGE(reader, version, transaction);
        CASE_HANDLE_MESSAGE(reader, version, verack);
        CASE_HANDLE_MESSAGE(reader, version, version);
        CASE_HANDLE_MESSAGE(reader, version, xversion);
        // CASE_HANDLE_MESSAGE(reader, version, xverack);
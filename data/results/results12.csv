
LINK NUMBER 1
Error fetching diff

LINK NUMBER 2
Error fetching diff

LINK NUMBER 3
Error fetching diff

LINK NUMBER 4

File path: src/main/java/simulation/Warehouse.java
"/*
 * Warehouse is a class that extends SimState and represents a simulation of a warehouse.
 * It initializes the simulation with a given seed and file paths,
 * reads the warehouse configuration from a file,
 * and manages the agents, tasks, and the warehouse environment.
 * It also provides methods for moving agents, and checking for walls or occupied spaces.
 * The class also includes methods for scoring and running the simulation.
 * It uses the MASON simulation library for agent-based modeling.
 */"

LINK NUMBER 5
Not enough lines

LINK NUMBER 6

File path: Game.py
"import pygame
import random

# Initialize PyGame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 400
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption(""Jump Over Spikes"")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

# Clock for controlling the frame rate
clock = pygame.time.Clock()

# Player settings
player_size = 40
player_x = 100
player_y = HEIGHT - player_size
player_velocity = 0
jump_force = -15
gravity = 1

# Spike settings
spike_width = 20
spike_height = 40
spike_x = WIDTH
spike_y = HEIGHT - spike_height
spike_speed = 10

# Game variables
running = True
is_jumping = False
score = 0
font = pygame.font.Font(None, 36)

# Main loop
while running:
    screen.fill(WHITE)

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            if not is_jumping:
                is_jumping = True
                player_velocity = jump_force

    # Player movement
    if is_jumping:
        player_y += player_velocity
        player_velocity += gravity
        if player_y >= HEIGHT - player_size:
            player_y = HEIGHT - player_size
            is_jumping = False

    # Spike movement
    spike_x -= spike_speed
    if spike_x < -spike_width:
        spike_x = WIDTH
        score += 1

    # Collision detection
    if spike_x < player_x + player_size and spike_x + spike_width > player_x:
        if player_y + player_size >= spike_y:
            running = False  # End the game if the player hits a spike

    # Draw player, spike, and score
    pygame.draw.rect(screen, GREEN, (player_x, player_y, player_size, player_size))
    pygame.draw.polygon(screen, RED, [(spike_x, spike_y), (spike_x + spike_width // 2, spike_y - spike_height), (spike_x + spike_width, spike_y)])
    score_text = font.render(f""Score: {score}"", True, BLACK)
    screen.blit(score_text, (10, 10))

    # Update the display
    pygame.display.flip()
    clock.tick(30)

# Quit PyGame
pygame.quit()"

LINK NUMBER 7

File path: inst/usbode/usbode.py
"    
    # Track last update time to periodically check status
    last_update_time = time.time()
    update_interval = 5  # Check for updates every 5 seconds
    
    while not exitRequested:
        current_time = time.time()
        
        # Check button states
        for i, pin in enumerate(button_pins):
            current_state = disp.RPI.digital_read(pin)
            
            # Button press detected (transition from 1 to 0)
            if current_state == 0 and last_button_states[pin] == 1:
                last_button_states[pin] = 0
                
            # Button release detected (transition from 0 to 1)
            elif current_state == 1 and last_button_states[pin] == 0:
                last_button_states[pin] = 1
                
                # Check debounce
                if current_time - last_press_time[pin] > debounce_time:
                    last_press_time[pin] = current_time
                    
                    # Handle button actions
                    if i == 0:  # Mode button
                        print(""Changing MODE"")
                        switch()
                        updateDisplay(disp)
                    elif i == 1:  # Advanced menu button
                        print(""ADVANCED MENU"")
                        updateDisplay_Advanced(disp)
                        updateDisplay(disp)
                    elif i == 2:  # OK button
                        print(""OK"")
                        changeISO_OLED(disp)
                        updateDisplay(disp)
            
            # Update button state
            last_button_states[pin] = current_state
        
        # Handle display updates separately from button presses
        should_update = False
        with update_lock:
            if updateEvent == 1:
                updateEvent = 0
                should_update = True
        
        # Check for periodic updates even if no explicit event
        if current_time - last_update_time > update_interval:
            last_update_time = current_time
            should_update = True
        
        if should_update:"

LINK NUMBER 8
Error fetching diff

LINK NUMBER 9
Error fetching diff

LINK NUMBER 10
Error fetching diff

LINK NUMBER 11
Not enough lines

LINK NUMBER 12
Not enough lines

LINK NUMBER 13
Not enough lines

LINK NUMBER 14
Not enough lines

LINK NUMBER 15
Error fetching diff

LINK NUMBER 16
Error fetching diff

LINK NUMBER 17
Error fetching diff

LINK NUMBER 18
Not enough lines

LINK NUMBER 19
Not enough lines

LINK NUMBER 20
Not enough lines

LINK NUMBER 21
Not enough lines

LINK NUMBER 22
Error fetching diff

LINK NUMBER 23
Error fetching diff

LINK NUMBER 24
Error fetching diff

LINK NUMBER 25

File path: forgot.php
"// deepcode ignore PhpSameEvalBinaryExpressionfalse: <please specify a reason of ignoring this>
if (isset($nickname) && !empty($nickname) && isset($key) && !empty($key) && $pwdchanged != true) {
	try {
		$pdo = new PDO($dsn, DB_USERNAME, DB_PASSWORD, $db_options);
		switch (DB_DRIVER) {
			case ""mysql"":
				$stmt = $pdo->prepare(""SELECT forgottoken FROM users WHERE nickname = :nickname"");
				break;
			case ""pgsql"":
				$stmt = $pdo->prepare(""SELECT forgottoken FROM users WHERE lower(nickname) = :nickname"");
				break;
		}
		$stmt->bindValue("":nickname"", $nickname);
		$stmt->execute();
		$pdo = null;
	} catch (PDOException $e) {
		error_log($langArray['invalid_query'] . ' ' . $e->getMessage() . '\n' . $langArray['whole_query'] . ' ' . $stmt->queryString, 0);
	}
	$sqlresults = $stmt->fetch(PDO::FETCH_ASSOC);
	$forgottoken = $sqlresults[""forgottoken""];

	if (mb_strtolower($key) === mb_strtolower($forgottoken)) {
		require 'includes/header.php';
		print '<form class=""srs-container"" method=""POST"" action=""' . $_SERVER[""PHP_SELF""] . '?nickname=' . $nickname . '&key=' . $forgottoken . '"">
<span class=""srs-header"">' . $langArray['new_password'] . '</span>

<div class=""srs-content"">
	<a href=""#"" id=""passwordRequirements"">' . $langArray['password_requirements'] . '</a><br>
	<div class=""bubble-container"">
			<div class=""bubble"" id=""bubblePopup"">
			' . $langArray['password_requirements_text'] . '
			<button id=""closePopup"">' . $langArray['close_btn'] . '</button>
			</div>
    <label for=""password"" class=""srs-lb"">' . $langArray['password'] . '</label><input name=""password"" id=""password"" type=""password"" class=""srs-tb""><br>
    <span id=""pwstatus""></span><br>
	</div>
    <label for=""password2"" class=""srs-lb"">' . $langArray['repeat_password'] . '</label><input name=""password2"" id=""password2"" type=""password"" class=""srs-tb""><br>
</div>
<div class=""srs-footer"">
	<div class=""srs-button-container"">
<input type=""submit"" value=""' . $langArray['change_password_button'] . '"" class=""srs-btn"">
</div>
<div class=""srs-slope""></div>
</div>
</form>
<br><br>
<script src=""./js/pwdreq.js""></script>
<script src=""./js/pwdcheck.js""></script>';
		require 'includes/footer.php';
	} else {
		require 'includes/header.php';
		print '<span class=""srs-header"">' . $langArray['forgot_password_heading'] . ' - ' . $langArray['error'] . '</span>
<div class=""srs-content"">
' . $langArray['wrong_nickname_or_verification_key'] . '
</div><br><br><br>';
		require 'includes/footer.php';
		exit();
	}
	;
} elseif (!empty($email)) {
	require 'includes/header.php';
	print '<span class=""srs-header"">' . $langArray['new_password'] . ' - ' . $langArray['email'] . '</span>
<div class=""srs-content"">
' . $langArray['email_sent_instruction_page_text'] . '
</div><br><br><br>';
	require 'includes/footer.php';
	try {
		$pdo = new PDO($dsn, DB_USERNAME, DB_PASSWORD, $db_options);
		$stmt = $pdo->prepare(""SELECT nickname FROM users WHERE email=:email"");
		$stmt->bindValue("":email"", $email);
		$stmt->execute();
		$sqlresults = $stmt->fetch(PDO::FETCH_ASSOC);
		if ($stmt->rowCount() === 1) {
			$nickname = mb_strtolower($sqlresults['nickname']);
			$randomkey = genRandomKey();
			$pdo = null;

			$pdo = new PDO($dsn, DB_USERNAME, DB_PASSWORD, $db_options);
			switch (DB_DRIVER) {
				case ""mysql"":
					$stmt = $pdo->prepare(""UPDATE users SET forgottoken=:randomkey WHERE nickname=:nickname"");
					break;
				case ""pgsql"":
					$stmt = $pdo->prepare(""UPDATE users SET forgottoken=:randomkey WHERE lower(nickname) = :nickname"");
					break;
				default:
					throw new Exception(""unsupported_database_driver"");
			}
			$stmt->bindValue("":randomkey"", $randomkey);
			$stmt->bindValue("":nickname"", $nickname);
			$stmt->execute();
			$pdo = null;
			$from_name = htmlspecialchars(trim($from_name), ENT_QUOTES, 'UTF-8');
			$from_mail = filter_var($from_mail, FILTER_VALIDATE_EMAIL);
			if (!$from_mail) {
				error_log('Invalid sender email address: ' . $from_mail);
				exit('Invalid sender email address');
			}
			
			// Verify the email exists in the database
			$stmt = $pdo->prepare(""SELECT COUNT(*) FROM users WHERE email = :email"");
			$stmt->bindValue(':email', $email);
			$stmt->execute();
			if ($stmt->fetchColumn() === 0) {
				exit('Email address not found');
			}
			
			// Rate limiting to prevent abuse
			if (!isset($_SESSION['email_attempts'])) {
				$_SESSION['email_attempts'] = 0;
			}
			if ($_SESSION['email_attempts'] >= 5) {
				exit('Too many email attempts. Please try again later.');
			}
			$_SESSION['email_attempts']++;
			
			// Ensure HTTPS is used
			if (empty($_SERVER['HTTPS']) || $_SERVER['HTTPS'] !== 'on') {
				exit('Secure connection required');
			}
			
			$mailheaders = ""From: {$from_name} <{$from_mail}>\r\n"";
			$mailheaders .= ""X-Mailer: Seat Reservation/2.0"";
			$linkPath = '/forgot.php';
			$baseUrl = 'https://' . $_SERVER['SERVER_NAME'] . $linkPath;
			$resetLink = $baseUrl . '?nickname=' . urlencode($nickname) . '&key=' . urlencode($randomkey);
			$mailmsg = $langArray['email_change_password_body_hi'] . "" "" . htmlspecialchars($nickname) . ""\n\n"" .
				$langArray['email_change_password_body_link'] . ""\n\n"" .
				$resetLink;
			
			// Log email-sending activity for debugging
			// error_log(""Password reset email sent to: {$email}"");
			
			mail($email, $mail_subject, $mailmsg, $mailheaders);
		}
	} catch (PDOException $e) {
		error_log($langArray['invalid_query'] . ' ' . $e->getMessage() . '\n' . $langArray['whole_query'] . ' ' . $stmt->queryString, 0);
	}
} else {
	if ($pwdchanged != true) {
		require 'includes/header.php';
		print '<form class=""srs-container"" method=""POST"" action=""' . htmlspecialchars($_SERVER[""PHP_SELF""]); . '"">
<span class=""srs-header"">' . $langArray['forgot_password_heading'] . '</span>
<div class=""srs-content"">
	<label for=""email"" class=""srs-lb"">' . $langArray['email'] . '</label><input name=""email"" value="""" id=""email"" class=""srs-tb""><br>
</div>
<div class=""srs-footer"">
	<div class=""srs-button-container"">
		<input type=""submit"" class=""submit"" name=""regsubmit"" value=""' . $langArray['continue'] . '"">
	</div>
	<div class=""srs-slope""></div>
</div>
</form><br>';
		require 'includes/footer.php';
	}
	;"

LINK NUMBER 26
Not enough lines

LINK NUMBER 27
Not enough lines

LINK NUMBER 28
Not enough lines

LINK NUMBER 29
Error fetching diff

LINK NUMBER 30
Error fetching diff

LINK NUMBER 31
Error fetching diff

LINK NUMBER 32
Not enough lines

LINK NUMBER 33

File path: taskmaster/urls.py
"""""""
Django settings for taskmaster project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
""""""

from pathlib import Path
import os

env_path = os.path.join(os.path.dirname(__name__), 'env.py')
if os.path.exists(env_path):
    import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(""SECRET_KEY"")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tasks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'taskmaster.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'taskmaster.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"

LINK NUMBER 34

File path: project/main.py
"        # Penalize for high speeds when landing
        if didAgentLand(self) and self.y_speed > 2.0:
            score -= 2000
        # Reward for successful landing
        if didAgentLand(self) and self.y_speed <= 2.0:
            score += 1000"

LINK NUMBER 35

File path: matrix.cpp
"
int main() {
    string filename;
    cout << ""Enter the filename: "";
    cin >> filename;

    ifstream userfile(filename);
    if (!userfile) {
        cerr << ""Error opening file."" << endl;
        return 1;
    }
    int N, type;
    userfile >> N >> type;

    if (type== 0) {
        Matrix<int> A(N), B(N);
        A.readfile(userfile);
        B.readfile(userfile);
    
        cout << ""Matrix A:\n""; A.print();
        cout << ""Matrix B:\n""; B.print();
        cout << ""A + B:\n""; (A + B).print();
        cout << ""A * B:\n""; (A * B).print();
        cout << ""Diagonal sum of A: "" << A.diagonalSum() << endl;
        cout << ""Diagonal sum of B: "" << B.diagonalSum() << endl;
        cout << ""Swapping rows 0 and 1 in A:\n""; A.swaprows(0, 1); A.print();
        cout << ""Swapping columns 0 and 1 in A:\n""; A.swapcols(0, 1); A.print();
        cout << ""Changing value at (0, 0) in A to 348:\n""; A.chngevalue(0, 0, 348); A.print();
        }   else if (type == 1) {
            Matrix<double> A(N), B(N);
            A.readfile(userfile);
            B.readfile(userfile);

            cout << ""Matrix A:\n""; A.print();
            cout << ""Matrix B:\n""; B.print();
            cout << ""A + B:\n""; (A + B).print();
            cout << ""A * B:\n""; (A * B).print();
            cout << ""Diagonal sum of A: "" << A.diagonalSum() << endl;
            cout << ""Diagonal sum of B: "" << B.diagonalSum() << endl;
            cout << ""Swapping rows 0 and 1 in A:\n""; A.swaprows(0, 1); A.print();
            cout << ""Swapping columns 0 and 1 in A:\n""; A.swapcols(0, 1); A.print();
            cout << ""Changing value at (0, 0) in A to 348.843:\n""; A.chngevalue(0, 0, 349.843); A.print();

        }
        userfile.close(); 
        return 0;
    }"

LINK NUMBER 36
Error fetching diff

LINK NUMBER 37
Error fetching diff

LINK NUMBER 38
Error fetching diff

LINK NUMBER 39
Not enough lines

LINK NUMBER 40
Not enough lines

LINK NUMBER 41

File path: F24S2DiscussionSolutionSandreth/DiscussionMvcSandreth/Controllers/OfficerController.cs
"        public IActionResult CreateTestData()
        {
            Officer testOfficer7 = new Officer
            {
                Id = ""7"",
                Firstname = ""Test"",
                Lastname = ""Officer7"",
                PhoneNumber = ""123-456-7890"",
                Email = ""testofficer7@example.com"",
                SupervisorsOfOfficer = new List<Supervises>()
            };

            Officer testOfficer8 = new Officer
            {
                Id = ""8"",
                Firstname = ""Test"",
                Lastname = ""Officer8"",
                PhoneNumber = ""123-456-7891"",
                Email = ""testofficer8@example.com"",
                SupervisorsOfOfficer = new List<Supervises>()
            };

            Supervisor testSupervisor9 = new Supervisor
            {
                Id = ""9"",
                Firstname = ""Test"",
                Lastname = ""Supervisor9"",
                PhoneNumber = ""123-456-7892"",
                Email = ""testsupervisor9@example.com"",
                OfficersSupervised = new List<Supervises>()
            };

            Supervisor testSupervisor10 = new Supervisor
            {
                Id = ""10"",
                Firstname = ""Test"",
                Lastname = ""Supervisor10"",
                PhoneNumber = ""123-456-7893"",
                Email = ""testsupervisor10@example.com"",
                OfficersSupervised = new List<Supervises>()
            };

            // Establish the relationship between Officer 7 and Supervisor 9
            Supervises supervises = new Supervises
            {
                Officer = testOfficer7,
                Supervisor = testSupervisor9,
                StartDate = DateTime.Now
            };

            testOfficer7.SupervisorsOfOfficer.Add(supervises);
            testSupervisor9.OfficersSupervised.Add(supervises);

            // Add the test data to the database
            _database.Officer.Add(testOfficer7);
            _database.Officer.Add(testOfficer8);
            _database.Supervisor.Add(testSupervisor9);
            _database.Supervisor.Add(testSupervisor10);
            _database.Supervises.Add(supervises);
            _database.SaveChanges();

            return RedirectToAction(""Index"");
        }"

LINK NUMBER 42
Not enough lines

LINK NUMBER 43
Error fetching diff

LINK NUMBER 44
Error fetching diff

LINK NUMBER 45
Error fetching diff

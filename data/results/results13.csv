
LINK NUMBER 1
Not enough lines

LINK NUMBER 2
Not enough lines

LINK NUMBER 3
Error fetching diff

LINK NUMBER 4
Not enough lines

LINK NUMBER 5
Not enough lines

LINK NUMBER 6
Not enough lines

LINK NUMBER 7
Not enough lines

LINK NUMBER 8
Error fetching diff

LINK NUMBER 9
Error fetching diff

LINK NUMBER 10
Error fetching diff

LINK NUMBER 11

File path: 03.03.2025.claude-auto-app-copilot-mod.py
"import requests
import pandas as pd
import re
import os
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import pickle
from google.colab import drive
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from docx import Document
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer

# Initialization
def initialize():
    drive.mount('/content/drive')
    nltk.download('punkt')
    nltk.download('stopwords')

# Job Retriever Class
class JobRetriever:
    def __init__(self):
        self.jobs_df = pd.DataFrame(columns=['Title', 'Company', 'Location', 'Description', 'URL', 'Date_Posted', 'Keywords_Match'])

    def search_indeed(self, keywords, location, pages=5):
        base_url = ""https://www.indeed.com/jobs""
        all_jobs = []

        for page in range(pages):
            params = {'q': keywords, 'l': location, 'start': page * 10}
            headers = {'User-Agent': 'Mozilla/5.0'}

            try:
                response = requests.get(base_url, params=params, headers=headers)
                soup = BeautifulSoup(response.text, 'html.parser')
                job_cards = soup.find_all('div', class_='jobsearch-SerpJobCard')

                for card in job_cards:
                    job_title_elem = card.find('a', class_='jobtitle')
                    company_elem = card.find('span', class_='company')
                    location_elem = card.find('div', class_='recJobLoc')
                    description_elem = card.find('div', class_='summary')

                    if job_title_elem and company_elem:
                        job_title = job_title_elem.text.strip()
                        company = company_elem.text.strip()
                        location = location_elem['data-rc-loc'] if location_elem else ""N/A""
                        description = description_elem.text.strip() if description_elem else ""N/A""
                        url = ""https://www.indeed.com"" + job_title_elem['href']

                        keywords_list = keywords.lower().split()
                        match_score = sum(1 for keyword in keywords_list if keyword.lower() in (job_title.lower() + "" "" + description.lower()))

                        job_data = {'Title': job_title, 'Company': company, 'Location': location, 'Description': description, 'URL': url, 'Date_Posted': datetime.now().strftime(""%Y-%m-%d""), 'Keywords_Match': match_score}
                        all_jobs.append(job_data)

            except requests.RequestException as e:
                print(f""Error scraping Indeed page {page}: {str(e)}"")

        self.jobs_df = pd.concat([self.jobs_df, pd.DataFrame(all_jobs)], ignore_index=True)

    def filter_jobs(self, min_keywords_match=2):
        return self.jobs_df[self.jobs_df['Keywords_Match'] >= min_keywords_match].sort_values('Keywords_Match', ascending=False)

    def save_jobs(self, filename='job_listings.csv'):
        path = '/content/drive/My Drive/' + filename
        self.jobs_df.to_csv(path, index=False)
        print(f""Saved {len(self.jobs_df)} jobs to {path}"")
        return path

# Document Customizer Class
class DocumentCustomizer:
    def __init__(self, resume_path, cover_letter_path):
        self.resume_path = resume_path
        self.cover_letter_path = cover_letter_path
        self.resume_doc = self.load_document(resume_path)
        self.cover_letter_doc = self.load_document(cover_letter_path)

    def load_document(self, path):
        try:
            return Document(path)
        except Exception as e:
            print(f""Error loading document from {path}: {str(e)}"")
            return None

    def extract_job_keywords(self, job_description):
        tokens = word_tokenize(job_description.lower())
        filtered_tokens = [word for word in tokens if word.isalnum() and word not in stopwords.words('english')]
        vectorizer = TfidfVectorizer(max_features=20)
        tfidf_matrix = vectorizer.fit_transform([' '.join(filtered_tokens)])
        feature_names = vectorizer.get_feature_names_out()
        word_scores = [(word, tfidf_matrix[0, i]) for i, word in enumerate(feature_names)]
        word_scores.sort(key=lambda x: x[1], reverse=True)
        return [word for word, score in word_scores[:10]]

    def customize_resume(self, job_title, company_name, job_description):
        if not self.resume_doc:
            return None

        custom_resume = Document()
        keywords = self.extract_job_keywords(job_description)
        print(f""Keywords extracted: {keywords}"")

        for para in self.resume_doc.paragraphs:
            if ""[OBJECTIVE]"" in para.text:
                custom_text = para.text.replace(""[OBJECTIVE]"", f""Experienced professional seeking the {job_title} position at {company_name}, bringing expertise in {', '.join(keywords[:3])}."")
                custom_resume.add_paragraph(custom_text, para.style)
            else:
                text = para.text
                for keyword in keywords:
                    if keyword.lower() in text.lower() and len(keyword) > 3:
                        text = re.sub(re.escape(keyword), f""**{keyword}**"", text, flags=re.IGNORECASE)
                custom_resume.add_paragraph(text, para.style)

        filename = f""Custom_Resume_{company_name}_{datetime.now().strftime('%Y%m%d')}.docx""
        save_path = f""/content/drive/My Drive/{filename}""
        custom_resume.save(save_path)
        print(f""Customized resume saved to {save_path}"")
        return save_path

# Initialization
initialize()

# Example usage
def run_job_application_system():
    resume_path = ""/content/drive/My Drive/Resume_Template.docx""
    cover_letter_path = ""/content/drive/My Drive/Cover_Letter_Template.docx""
    manager = JobApplicationManager(resume_path, cover_letter_path)
    job_keywords = ""cybersecurity IT project management CISSP PMP""
    locations = [""New York, NY"", ""Remote""]
    jobs_found = manager.search_jobs(job_keywords, locations)
    print(""\nTop matching jobs:"")
    for i, (_, job) in enumerate(jobs_found.head(10).iterrows()):
        print(f""{i+1}. {job['Title']} at {job['Company']} ({job['Location']}) - Match Score: {job['Keywords_Match']}"")
    manager.batch_process_jobs(num_jobs=3)
    print(""\nJob application automation completed!"")

run_job_application_system()"

LINK NUMBER 12
Not enough lines

LINK NUMBER 13

File path: ResnetV50ObjectClassificationHttpTriggerCoPilot/Function1.cs
"   private static readonly InferenceSession session = new InferenceSession(""resnet50.onnx"");

   [FunctionName(""ImageClassification"")]
   public static IActionResult Run(
       [HttpTrigger(AuthorizationLevel.Function, ""post"")] HttpRequest req,
       ILogger log)
   {
      log.LogInformation(""Processing image classification request..."");

      try
      {
         using var ms = new MemoryStream();
         req.Body.CopyTo(ms);
         using var image = Image.FromStream(ms);

         var inputTensor = PreprocessImage(image);

         var inputName = session.InputMetadata.Keys.First();
         var outputName = session.OutputMetadata.Keys.First();
         var result = session.Run(new Dictionary<string, NamedOnnxValue>
            {
                { inputName, NamedOnnxValue.CreateFromTensor(inputName, inputTensor) }
            });

         var predictions = result.First().AsTensor<float>().ToArray();

         return new JsonResult(new { predictions });
      }
      catch (Exception ex)
      {
         log.LogError($""Error: {ex.Message}"");
         return new BadRequestObjectResult(""Invalid image or request."");
      }
   }

   private static Tensor<float> PreprocessImage(Image image)
   {
      var resized = new Bitmap(image, new Size(224, 224));
      var tensorData = new float[1 * 3 * 224 * 224];

      for (int y = 0; y < 224; y++)
      {
         for (int x = 0; x < 224; x++)
         {
            var pixel = resized.GetPixel(x, y);
            tensorData[(0 * 3 * 224 * 224) + (0 * 224 * 224) + (y * 224) + x] = pixel.R / 255.0f;
            tensorData[(0 * 3 * 224 * 224) + (1 * 224 * 224) + (y * 224) + x] = pixel.G / 255.0f;
            tensorData[(0 * 3 * 224 * 224) + (2 * 224 * 224) + (y * 224) + x] = pixel.B / 255.0f;
         }
      }

      return new DenseTensor<float>(tensorData, new[] { 1, 3, 224, 224 });
   }"

LINK NUMBER 14
Not enough lines

LINK NUMBER 15
Error fetching diff

LINK NUMBER 16
Error fetching diff

LINK NUMBER 17
Error fetching diff

LINK NUMBER 18

File path: EightBit/EightBit.UnitTest/DeviceTests.cs
"namespace EightBit.UnitTest
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using EightBit;

    [TestClass]
    public class ChipTests
    {
        [TestMethod]
        public void Bit_ReturnsCorrectBit()
        {
            Assert.AreEqual(0x01, Chip.Bit(0));
            Assert.AreEqual(0x02, Chip.Bit(1));
            Assert.AreEqual(0x80, Chip.Bit(7));
            Assert.AreEqual(0x08, Chip.Bit((byte)3));
        }

        [TestMethod]
        public void SetBit_SetsBitCorrectly()
        {
            Assert.AreEqual(0b00001101, Chip.SetBit(0b00001001, 0b00000100));
            Assert.AreEqual(0b00001101, Chip.SetBit(0b00001101, 0b00000100));
            Assert.AreEqual(0b00001101, Chip.SetBit(0b00001101, 0b00000100, true));
            Assert.AreEqual(0b00001001, Chip.SetBit(0b00001101, 0b00000100, false));
        }

        [TestMethod]
        public void ClearBit_ClearsBitCorrectly()
        {
            Assert.AreEqual(0b00001001, Chip.ClearBit(0b00001101, 0b00000100));
            Assert.AreEqual(0b00001101, Chip.ClearBit(0b00001101, 0b00000100, false));
            Assert.AreEqual(0b00001001, Chip.ClearBit(0b00001101, 0b00000100, true));
        }

        [TestMethod]
        public void HighByte_LowByte_WorkCorrectly()
        {
            ushort value = 0xABCD;
            Assert.AreEqual(0xAB, Chip.HighByte(value));
            Assert.AreEqual(0xCD, Chip.LowByte(value));
            int intValue = 0x1234;
            Assert.AreEqual(0x12, Chip.HighByte(intValue));
            Assert.AreEqual(0x34, Chip.LowByte(intValue));
        }

        [TestMethod]
        public void PromoteByte_DemoteByte_WorkCorrectly()
        {
            Assert.AreEqual(0x3400, Chip.PromoteByte(0x34));
            Assert.AreEqual(0x12, Chip.DemoteByte(0x1234));
        }

        [TestMethod]
        public void HigherPart_LowerPart_WorkCorrectly()
        {
            ushort value = 0xABCD;
            Assert.AreEqual(0xAB00, Chip.HigherPart(value));
            Assert.AreEqual(0xCD, Chip.LowerPart(value));
        }

        [TestMethod]
        public void MakeWord_CreatesCorrectWord()
        {
            Assert.AreEqual(0x1234, Chip.MakeWord(0x34, 0x12));
        }

        [TestMethod]
        public void NibbleMethods_WorkCorrectly()
        {
            byte value = 0xAB;
            Assert.AreEqual(0xA, Chip.HighNibble(value));
            Assert.AreEqual(0xB, Chip.LowNibble(value));
            Assert.AreEqual(0xA0, Chip.HigherNibble(value));
            Assert.AreEqual(0xB, Chip.LowerNibble(value));
            Assert.AreEqual(0xB0, Chip.PromoteNibble(value));
            Assert.AreEqual(0xA, Chip.DemoteNibble(value));
        }

        [TestMethod]
        public void CountBits_ReturnsCorrectCount()
        {
            Assert.AreEqual(0, Chip.CountBits(0));
            Assert.AreEqual(1, Chip.CountBits(1));
            Assert.AreEqual(8, Chip.CountBits(0xFF));
        }

        [TestMethod]
        public void EvenParity_ReturnsCorrectParity()
        {
            Assert.IsTrue(Chip.EvenParity(0)); // 0 bits set
            Assert.IsFalse(Chip.EvenParity(1)); // 1 bit set
            Assert.IsTrue(Chip.EvenParity(3)); // 2 bits set
        }

        [TestMethod]
        public void FindFirstSet_ReturnsCorrectIndex()
        {
            Assert.AreEqual(0, Chip.FindFirstSet(0));
            Assert.AreEqual(1, Chip.FindFirstSet(1));
            Assert.AreEqual(2, Chip.FindFirstSet(2));
            Assert.AreEqual(3, Chip.FindFirstSet(4));
            Assert.AreEqual(5, Chip.FindFirstSet(0b10000));
        }
    }
}"

LINK NUMBER 19
Not enough lines

LINK NUMBER 20
Not enough lines

LINK NUMBER 21
Not enough lines

LINK NUMBER 22
Error fetching diff

LINK NUMBER 23
Error fetching diff

LINK NUMBER 24
Error fetching diff

LINK NUMBER 25
Not enough lines

LINK NUMBER 26
Not enough lines

LINK NUMBER 27
Not enough lines

LINK NUMBER 28

File path: tests/integration_test/test_utils_with_sqlite.py
"        return connection

def test_table_schema_includes_name_and_time(db_setup: sqlite3.Connection):
    """""" Check if the table schema includes 'name' and 'time' columns """"""
    cursor = db_setup.cursor()
    cursor.execute(""PRAGMA table_info(Project)"")
    columns = [column[1] for column in cursor.fetchall()]  # Extract column names
    assert ""name"" in columns, ""'name' column MUST exist in the schema""
    assert ""time"" in columns, ""'time' column MUST exist in the schema""

def test_check_if_project_exists(db_setup: sqlite3.Connection, setup_data: list[tuple]):
    """""" Check if the project exists in the database
     
    This test requires:
    - There is a database we can connect to
    - The database has the required tables created
    - There is data in the tables
    """"""
    for element in setup_data:
        does_exist = check_if_project_exists(element[0])
        assert does_exist, ""This project MUST exist"""

LINK NUMBER 29
Error fetching diff

LINK NUMBER 30
Error fetching diff

LINK NUMBER 31

File path: packages/api/src/sessions/useGetSessionDetail.ts
"import { CURRENT_GENERATION } from '@depromeet-makers/constant';
import type { UseMutationOptions } from '@tanstack/react-query';
import { useMutation, useQueryClient } from '@tanstack/react-query';

import type { CustomError } from '../base';
import { api } from '../base';
import type { Session } from '../types';

interface EditSessionRequest extends Omit<Session, 'sessionId' | 'generation'> {}

interface EditSessionResponse extends Session {}

const editSession = (sessionId: Session['sessionId'], request: EditSessionRequest) => {
  return api.put<EditSessionResponse>(`/v1/sessions/${sessionId}`, {
    ...request,
    generation: CURRENT_GENERATION,
  });
};

export const useEditSession = (
  sessionId: Session['sessionId'],
  options?: UseMutationOptions<EditSessionResponse, CustomError, EditSessionRequest>,
) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (request: EditSessionRequest) => editSession(sessionId, request),
    ...options,
    onSuccess: (...params) => {
      options?.onSuccess?.(...params);

      queryClient.invalidateQueries({
        queryKey: ['sessions'],
      });
    },
  });
};"

LINK NUMBER 32

File path: main.go
"	defer syscall.Close(fd)

	// ソケットをインターフェースにバインド
	addr := syscall.SockaddrLinklayer{
		Protocol: syscall.ETH_P_ALL,
		Ifindex:  iface.Index,
	}
	if err := syscall.Bind(fd, &addr); err != nil {
		log.Fatalf(""Failed to bind raw socket: %v"", err)
	}"

LINK NUMBER 33
Not enough lines

LINK NUMBER 34
Not enough lines

LINK NUMBER 35
Error fetching diff

LINK NUMBER 36
Error fetching diff

LINK NUMBER 37
Error fetching diff

LINK NUMBER 38
Not enough lines

LINK NUMBER 39

File path: apps/admin/src/constants/attendance.ts
"export const ATTENDANCE_STATUS_TEXT_COLOR: Record<ATTENDANCE_STATUS, string> = {
  [ATTENDANCE_STATUS.출석대기]: 'text-gray-300',
  [ATTENDANCE_STATUS.출석]: 'text-green-300',
  [ATTENDANCE_STATUS.지각]: 'text-yellow-300',
  [ATTENDANCE_STATUS.결석]: 'text-red-300',
};
"

LINK NUMBER 40
Not enough lines

LINK NUMBER 41
Not enough lines

LINK NUMBER 42
Error fetching diff

LINK NUMBER 43
Error fetching diff

LINK NUMBER 44
Error fetching diff

LINK NUMBER 45

File path: CopilotCpp8Qeens/CopilotCpp8Qeens.cpp
"// #include <iostream>
// include <vector>
// include <chrono>

import <iostream>;
import <vector>;
import <chrono>;

constexpr int N = 8;
using Board = uint64_t;

constexpr Board col_mask = (1ULL << N) - 1;
constexpr Board diag1_mask = (1ULL << (2 * N - 1)) - 1;
constexpr Board diag2_mask = (1ULL << (2 * N - 1)) - 1;

/*
constexpr Board col_threats[N] = {
    0x0101010101010101ULL,
    0x0202020202020202ULL,
    0x0404040404040404ULL,
    0x0808080808080808ULL,
    0x1010101010101010ULL,
    0x2020202020202020ULL,
    0x4040404040404040ULL,
    0x8080808080808080ULL
};

constexpr Board diag1_threats[2 * N - 1] = {
    0x0000000000000080ULL,
    0x0000000000008040ULL,
    0x0000000000804020ULL,
    0x0000000080402010ULL,
    0x0000008040201008ULL,
    0x0000804020100804ULL,
    0x0080402010080402ULL,
    0x8040201008040201ULL,
    0x4020100804020100ULL,
    0x2010080402010000ULL,
    0x1008040201000000ULL,
    0x0804020100000000ULL,
    0x0402010000000000ULL,
    0x0201000000000000ULL,
    0x0100000000000000ULL
};

constexpr Board diag2_threats[2 * N - 1] = {
    0x0000000000000001ULL,
    0x0000000000000102ULL,
    0x0000000000010204ULL,
    0x0000000001020408ULL,
    0x0000000102040810ULL,
    0x0000010204081020ULL,
    0x0001020408102040ULL,
    0x0102040810204080ULL,
    0x0204081020408000ULL,
    0x0408102040800000ULL,
    0x0810204080000000ULL,
    0x1020408000000000ULL,
    0x2040800000000000ULL,
    0x4080000000000000ULL,
    0x8000000000000000ULL
};
//*/

void solve(Board col, Board diag1, Board diag2, int row, std::vector<Board>& solutions, Board board) {
    if (row == N) [[unlikely]] {
        solutions.push_back(board);
        return;
    }

    Board safe = ~(col | diag1 | diag2) & col_mask;

    while (safe) {
        Board p = safe & (-safe);
        safe -= p;
        solve(col | p, (diag1 | p) << 1, (diag2 | p) >> 1, row + 1, solutions, board | (p << (row * N)));
    }
}

void print_solution(Board board) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            std::cout << ((board & (1ULL << (i * N + j))) ? ""1 "" : ""0 "");
        }
        std::cout << ""\n"";
    }
    std::cout << ""\n"";
}

int main() {
    std::vector<Board> solutions;
    auto start = std::chrono::high_resolution_clock::now();
    solve(0, 0, 0, 0, solutions, 0);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;

    std::cout << ""Time taken: "" << elapsed.count() << "" seconds\n"";
    std::cout << ""Number of solutions found: "" << solutions.size() << ""\n"";

    for (int i = 0; i < std::min(3, static_cast<int>(solutions.size())); ++i) {
        std::cout << ""Solution "" << i + 1 << "":\n"";
        print_solution(solutions[i]);
    }

    return 0;
}

/*
Time taken: 2.68e-05 seconds
Number of solutions found: 92
Solution 1:
1 0 0 0 0 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 1
0 0 0 0 0 1 0 0
0 0 1 0 0 0 0 0
0 0 0 0 0 0 1 0
0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0

Solution 2:
1 0 0 0 0 0 0 0
0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1
0 0 1 0 0 0 0 0
0 0 0 0 0 0 1 0
0 0 0 1 0 0 0 0
0 1 0 0 0 0 0 0
0 0 0 0 1 0 0 0

Solution 3:
1 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0
0 0 0 1 0 0 0 0
0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1
0 1 0 0 0 0 0 0
0 0 0 0 1 0 0 0
0 0 1 0 0 0 0 0


E:\Documents and Settings\Pablo\My Documents\My Sources\Cpp8Queens\cpp8Queens\x64\Release\CopilotCpp8Qeens.exe (process 10280) exited with code 0.
Press any key to close this window . . .
*/"

LINK NUMBER 46

File path: QuickQuiz/QuickQuiz/QuizLogic/Model/QuizTests.cs
"using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using QuickQuiz.QuestionLogic.Model;
using QuickQuiz.QuizLogic.Exceptions;
using QuickQuiz.QuizLogic.Model;

namespace QuickQuiz.Tests
{
    [TestClass]
    public class QuizTests
    {
        [TestMethod]
        public void CreateQuiz_ShouldInitializeQuizWithPlayerName()
        {
            // Arrange
            string playerName = ""Test Player"";
            var questions = new List<Question>
            {
                new Question(""Question 1""),
                new Question(""Question 2"")
            };

            // Act
            Quiz quiz = Quiz.Create(playerName, questions);

            // Assert
            Assert.AreEqual(playerName, quiz.PlayerName);
            Assert.IsNotNull(quiz.QuizId);
            Assert.IsTrue(quiz.QuestionListReadOnly.Any());
        }

        [TestMethod]
        public void GetNextQuestion_ShouldReturnNextUnansweredQuestion()
        {
            // Arrange
            string playerName = ""Test Player"";
            var questions = new List<Question>
            {
                new Question(""Question 1""),
                new Question(""Question 2"")
            };
            Quiz quiz = Quiz.Create(playerName, questions);

            // Act
            QuizQuestion nextQuestion = quiz.GetNextQuestion();

            // Assert
            Assert.IsNotNull(nextQuestion);
            Assert.AreEqual(""Question 1"", nextQuestion.OriginalQuestion.Text);
        }

        [TestMethod]
        [ExpectedException(typeof(ActiveQuestionNotAnsweredException))]
        public void GetNextQuestion_ShouldThrowExceptionIfActiveQuestionNotAnswered()
        {
            // Arrange
            string playerName = ""Test Player"";
            var questions = new List<Question>
            {
                new Question(""Question 1""),
                new Question(""Question 2"")
            };
            Quiz quiz = Quiz.Create(playerName, questions);
            QuizQuestion nextQuestion = quiz.GetNextQuestion();

            // Act
            quiz.GetNextQuestion();
        }

        [TestMethod]
        public void AnswerQuestion_ShouldReturnPlayersAnswer()
        {
            // Arrange
            string playerName = ""Test Player"";
            var questions = new List<Question>();

            Question question = new Question(""Question 1"");
            questions.Add(question);
            question.AddAnswer(new Answer(""Answer 1"", true));
            question.AddAnswer(new Answer(""Answer 2"", false));

            Quiz quiz = Quiz.Create(playerName, questions);
            QuizQuestion nextQuestion = quiz.GetNextQuestion();

            // Act
            Answer answer = quiz.AnswerQuestion(nextQuestion.QuizQuestionId, nextQuestion.OriginalQuestion.Answers.First().AnswerId);

            // Assert
            Assert.IsNotNull(answer);
            Assert.AreEqual(""Answer 1"", answer.Text);
        }

        [TestMethod]
        [ExpectedException(typeof(Exception), ""There is no Active Question"")]
        public void AnswerQuestion_ShouldThrowExceptionIfNoActiveQuestion()
        {
            // Arrange
            string playerName = ""Test Player"";
            var questions = new List<Question>();

            Question question = new Question(""Question 1"");
            questions.Add(question);
            question.AddAnswer(new Answer(""Answer 1"", true));
            question.AddAnswer(new Answer(""Answer 2"", false));

            Quiz quiz = Quiz.Create(playerName, questions);

            // Act
            quiz.AnswerQuestion(""invalidQuizQuestionId"", ""invalidAnswerId"");
        }

        [TestMethod]
        [ExpectedException(typeof(Exception), ""You are not answering Active Question"")]
        public void AnswerQuestion_ShouldThrowExceptionIfAnsweringNonActiveQuestion()
        {
            // Arrange
            string playerName = ""Test Player"";
            var questions = new List<Question>();

            Question question = new Question(""Question 1"");
            questions.Add(question);
            question.AddAnswer(new Answer(""Answer 1"", true));
            question.AddAnswer(new Answer(""Answer 2"", false));

            Quiz quiz = Quiz.Create(playerName, questions);
            QuizQuestion nextQuestion = quiz.GetNextQuestion();

            // Act
            quiz.AnswerQuestion(""invalidQuizQuestionId"", ""invalidAnswerId"");
        }
    }
}"

LINK NUMBER 47
Not enough lines

LINK NUMBER 48
Not enough lines

LINK NUMBER 49
Error fetching diff

LINK NUMBER 50
Error fetching diff

LINK NUMBER 51

File path: tests/wooODM/product/test_category.py
"import unittest
import unittest
from wooODM.products.category import Category
from wooODM.core import WooCommerce

class TestCategoryModel(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # Initialize WooCommerce API with dummy credentials for testing
        WooCommerce.init(
            url="""",
            consumer_key="""",
            consumer_secret=""""
        )
    @classmethod
    def create_test_category(cls, name=""Test Category"", slug=""test-category"", description=""A category for testing""):
        category = Category(
            name=name,
            slug=slug,
            description=description
        )
        return category.save()

    @classmethod
    def delete_test_category(cls, category: Category):
        return category.delete()

    def test_create_category(self):
        category = Category(
            name=""Test Category"",
            slug=""test-category"",
            description=""A category for testing""
        )
        saved_category = category.save()
        self.assertIsNotNone(saved_category.id)
        self.assertEqual(saved_category.name, ""Test Category"")

    def test_get_category(self):
        test_category = TestCategoryModel.create_test_category(name=""Get Test Category"", slug=""get-test-category"")
        category = Category.get(test_category.id)
        self.assertEqual(category.id, test_category.id)
        self.assertEqual(category, test_category)

        test_category.delete()
        with self.assertRaises(Exception):
            Category.get(test_category.id)

    def test_get_all_categories(self):
        categories = Category.all(per_page=5, page=1)
        self.assertIsInstance(categories, list)
        self.assertGreaterEqual(len(categories), 1)
        self.assertIsInstance(categories[0], Category)

    def test_create_incomplete_category(self):
        with self.assertRaises(ValueError):
            Category(
                slug=""incomplete-category""
            ).save()

    def test_create_category_without_slug(self):
        with self.assertRaises(ValueError):
            Category(
                name=""Category without Slug""
            ).save()

    def test_create_category_with_invalid_data(self):
        with self.assertRaises(ValueError):
            Category(
                name=""Invalid Category"",
                slug=""invalid-category"",
                description=123  # Invalid type for description
            ).save()

    def test_update_category_with_invalid_data(self):
        category_id = 1  # Update with a valid category ID
        category = Category.get(category_id)
        category.description = 123  # Invalid type for description
        with self.assertRaises(ValueError):
            category.save()

    def test_smoke(self):
        # Create a category
        category = TestCategoryModel.create_test_category(
            name=""Smoke Test Category"",
            slug=""smoke-test-category"",
            description=""A category for smoke testing""
        )
        self.assertIsNotNone(category.id)
        self.assertEqual(category.name, ""Smoke Test Category"")
        self.assertEqual(category.description, ""A category for smoke testing"")

        # Update the category
        category.name = ""Updated Smoke Test Category""
        updated_category = category.save()
        self.assertEqual(updated_category.name, ""Updated Smoke Test Category"")

        # Delete the category
        delete_response = updated_category.delete()
        self.assertEqual(delete_response, updated_category)

if __name__ == '__main__':
    unittest.main()"

LINK NUMBER 52
Not enough lines

LINK NUMBER 53

File path: routes/stock.js
"const express = require('express');
const axios = require('axios');
const router = express.Router();

// Replace with your Alpha Vantage API key
const API_KEY = 'YOUR_API_KEY';

router.get('/:symbol', async (req, res) => {
  const symbol = req.params.symbol;
  const url = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${symbol}&interval=5min&apikey=${API_KEY}`;

  try {
    const response = await axios.get(url);
    const data = response.data;

    if (data['Error Message']) {
      return res.status(404).render('stock', { error: 'Stock symbol not found' });
    }

    const timeSeries = data['Time Series (5min)'];
    const latestTime = Object.keys(timeSeries)[0];
    const latestData = timeSeries[latestTime];

    const stockInfo = {
      symbol,
      price: latestData['1. open'],
      time: latestTime
    };

    res.render('stock', { stock: stockInfo });
  } catch (error) {
    res.status(500).render('stock', { error: 'Error fetching stock data' });
  }
});

module.exports = router;"

LINK NUMBER 54
Not enough lines

LINK NUMBER 55
Error fetching diff

LINK NUMBER 56
Error fetching diff

LINK NUMBER 57
Error fetching diff

LINK NUMBER 58
Not enough lines

LINK NUMBER 59
Not enough lines

LINK NUMBER 60
Not enough lines

LINK NUMBER 61

File path: packages/api/src/sessions/useGetSessionList.ts
"import { CURRENT_GENERATION } from '@depromeet-makers/constant';
import type { UseMutationOptions } from '@tanstack/react-query';
import { useMutation, useQueryClient } from '@tanstack/react-query';

import type { CustomError } from '../base';
import { api } from '../base';
import type { Session } from '../types';

interface CreateSessionRequest extends Omit<Session, 'sessionId' | 'generation'> {}

interface CreateSessionResponse extends Session {}

const createSession = (request: CreateSessionRequest) => {
  return api.post<CreateSessionResponse>('/v1/sessions', { ...request, generation: CURRENT_GENERATION });
};

export const useCreateSession = (
  options?: UseMutationOptions<CreateSessionResponse, CustomError, CreateSessionRequest>,
) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: createSession,
    ...options,
    onSuccess: (...params) => {
      options?.onSuccess?.(...params);

      queryClient.invalidateQueries({
        queryKey: ['sessions'],
      });
    },
  });
};"

LINK NUMBER 62
Error fetching diff

LINK NUMBER 63
Error fetching diff

LINK NUMBER 64
Error fetching diff

LINK NUMBER 65
Not enough lines

LINK NUMBER 66

File path: app/__init__.py
"# 🚜 Smart Fleet Maintenance API

## 📌 Overview
The **Smart Fleet Maintenance API** is designed to help track maintenance schedules, predict equipment failures, and log service records for agricultural machinery.

## 🔥 Features
- **Register Equipment** – Store machine details (model, purchase date, usage hours).
- **Maintenance Scheduler** – Predict maintenance needs based on usage.
- **Service Logging** – Track service records and update machine status.
- **Alerts & Notifications** – Notify users when maintenance is due.

## 🏗️ Tech Stack
- **Backend:** FastAPI (Python)
- **Database:** SQLite / PostgreSQL
- **Testing:** Pytest
- **Data Validation:** Pydantic
- **CI/CD:** GitHub Actions (for automated testing)

## 🏁 Getting Started

### **🔹 Prerequisites**
Ensure you have the following installed:
- Python 3.9+
- pip
- Virtual environment tool (venv or conda)

### **🔹 Installation**
```bash
# Clone the repository
git clone https://github.com/yourusername/smart-fleet-maintenance-api.git
cd smart-fleet-maintenance-api

# Set up a virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt
```

### **🔹 Running the API**
```bash
uvicorn main:app --reload
```
API will be available at: `http://127.0.0.1:8000`

### **🔹 Running Tests**
```bash
pytest tests/
```

## 📂 Project Structure
```
smart-fleet-maintenance-api/
│── main.py          # Entry point for FastAPI application
│── database.py      # Database connection setup
│── requirements.txt # List of dependencies
|── models/
    |── models.py      # Pydantic models for request validation
│── tests/           # Pytest test cases
│── routers/         # API route handlers
│   ├── equipment.py
│   ├── maintenance.py
│── .github/workflows/ci.yml  # GitHub Actions for CI/CD
│── README.md        # Project documentation
```

## 🚀 API Endpoints
### 1️⃣ Register Equipment
**POST** `/equipment/`
#### Request Body:
```json
{
  ""name"": ""Tractor X"",
  ""model"": ""TX-500"",
  ""purchase_date"": ""2023-01-15"",
  ""usage_hours"": 100
}
```
#### Response:
```json
{
  ""id"": ""UUID"",
  ""name"": ""Tractor X"",
  ""model"": ""TX-500"",
  ""purchase_date"": ""2023-01-15"",
  ""usage_hours"": 100
}
```

### 2️⃣ Get Equipment List
**GET** `/equipment/`

More endpoints will be added as features are implemented.

## 📌 Future Enhancements
- **Machine Learning for Predictive Maintenance**
- **Fleet Analytics Dashboard (Power BI)**
- **Real-Time Alerts via WebSockets**

---
### 💡 Contributing
Feel free to open an issue or submit a pull request.

### 📜 License
MIT License. See `LICENSE` for details.
"

LINK NUMBER 67

File path: apps/admin/src/app/(admin)/session/(data)/session.ts
"import type { Dispatch, PropsWithChildren, SetStateAction } from 'react';
import { createContext, useContext, useState } from 'react';

export interface MarkerType {
  id: string;
  position: {
    lat: number;
    lng: number;
  };
  placeName: string;
  addressName: string;
}

interface UsersContextType {
  markers: MarkerType[];
  setMarkers: Dispatch<SetStateAction<MarkerType[]>>;
  selectedPlace?: MarkerType;
  setSelectedPlace: Dispatch<SetStateAction<MarkerType | undefined>>;
}

const KaKaoMapContext = createContext<UsersContextType | null>(null);

const KaKaoMapProvider = ({ children }: PropsWithChildren) => {
  const [markers, setMarkers] = useState<MarkerType[]>([]);
  const [selectedPlace, setSelectedPlace] = useState<MarkerType>();

  return (
    <KaKaoMapContext.Provider value={{ markers, setMarkers, selectedPlace, setSelectedPlace }}>
      {children}
    </KaKaoMapContext.Provider>
  );
};

export const useKaKaoMap = () => {
  const kaKaoMapContext = useContext(KaKaoMapContext);

  if (!kaKaoMapContext) {
    throw new Error('<kaKaoMapContext /> 내부에서 useKaKaoMap을 사용할 수 있어요.');
  }

  return kaKaoMapContext;
};

export default KaKaoMapProvider;"

LINK NUMBER 68
Not enough lines

LINK NUMBER 69
Error fetching diff

LINK NUMBER 70
Error fetching diff

LINK NUMBER 71
Error fetching diff

LINK NUMBER 72

File path: turingmachine.py
"for i in range(0,len(tape)):
	try:
		tape[i] = int(tape[i])
	except ValueError:
		try:
			assert tape[i] in symbols
		except AssertionError:
			tape[i] = ""A""
	else:
		try:
			assert tape[i] in symbols
		except AssertionError:
			tape[i] = 0"

LINK NUMBER 73
Not enough lines

LINK NUMBER 74
Not enough lines

LINK NUMBER 75

File path: python/mandelbrot_set/mandelbrot.py
"from mpi4py import MPI
import numpy as np
import matplotlib.pyplot as plt

def mandelbrot(c, max_iter):
    z = c
    for n in range(max_iter):
        if abs(z) > 2:
            return n
        z = z*z + c
    return max_iter

def mandelbrot_set(xmin, xmax, ymin, ymax, width, height, max_iter):
    r1 = np.linspace(xmin, xmax, width)
    r2 = np.linspace(ymin, ymax, height)
    n3 = np.empty((width, height), dtype=int)
    for i in range(width):
        for j in range(height):
            n3[i, j] = mandelbrot(r1[i] + 1j*r2[j], max_iter)
    return n3

def main():
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()

    # Parameters for the Mandelbrot set
    xmin, xmax, ymin, ymax = -2.0, 1.0, -1.5, 1.5
    width, height = 800, 800
    max_iter = 256

    # Divide the work among processes
    local_width = width // size
    local_xmin = xmin + rank * local_width * (xmax - xmin) / width
    local_xmax = xmin + (rank + 1) * local_width * (xmax - xmin) / width

    # Each process computes its part of the Mandelbrot set
    local_mandelbrot = mandelbrot_set(local_xmin, local_xmax, ymin, ymax, local_width, height, max_iter)

    # Gather the results to the root process
    if rank == 0:
        mandelbrot_image = np.empty((width, height), dtype=int)
    else:
        mandelbrot_image = None

    comm.Gather(local_mandelbrot, mandelbrot_image, root=0)

    # Root process visualizes the result
    if rank == 0:
        plt.imshow(mandelbrot_image.T, extent=[xmin, xmax, ymin, ymax], cmap='hot')
        plt.colorbar()
        plt.title(""Mandelbrot Set"")
        plt.xlabel(""Re"")
        plt.ylabel(""Im"")
        plt.savefig(""mandelbrot_set.png"")
        # plt.show()

if __name__ == ""__main__"":
    main()"

LINK NUMBER 76
Error fetching diff

LINK NUMBER 77
Error fetching diff

LINK NUMBER 78
Error fetching diff

LINK NUMBER 79
Not enough lines

LINK NUMBER 80

File path: packages/api/src/base/token.ts
"import type { UseMutationOptions } from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import type { CustomError } from '../base';
import { api } from '../base';
import { setAccessToken, setRefreshToken } from '../base/token';

interface PostAuthTestResponse {
  accessToken: string;
  refreshToken: string;
}

const postAuthTest = () => {
  return api.post<PostAuthTestResponse>('/v1/auth/test');
};

export const useAuthTest = (options?: UseMutationOptions<PostAuthTestResponse, CustomError>) =>
  useMutation({
    mutationFn: postAuthTest,
    ...options,
    onSuccess: async (data, ...params) => {
      await setAccessToken(data.accessToken);
      await setRefreshToken(data.refreshToken);

      options?.onSuccess?.(data, ...params);
    },
  });"

LINK NUMBER 81
Not enough lines

LINK NUMBER 82
Not enough lines

LINK NUMBER 83
Error fetching diff

LINK NUMBER 84
Error fetching diff

LINK NUMBER 85
Error fetching diff

LINK NUMBER 86
Not enough lines

LINK NUMBER 87

File path: java/BonusCalculator.java
"/**
 * Encapsulates the logic for calculating bonuses based on gross salary.
 */
public class BonusCalculator {
    // Constants
    private static final double BONUS_RATE = 0.10;

    /**
     * Calculates the bonus based on the given gross salary.
     *
     * @param grossSalary the gross salary of the employee
     * @return the calculated bonus
     */
    public double calculateBonus(double grossSalary) {
        return grossSalary * BONUS_RATE;
    }
}"

LINK NUMBER 88

File path: java/PayrollSystem.java
"import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * Manages the overall payroll system, including initializing employees, sorting employees, calculating net salaries,
 * calculating department totals, and displaying information.
 */
public class PayrollSystem {
    // Constants
    private static final int MAX_EMPLOYEES = 5;
    private static final double TAX_RATE = 0.20;
    private static final double BONUS_RATE = 0.10;
    private static final double DEDUCTION_RATE = 0.05;

    // Attributes
    private List<Employee> employees = new ArrayList<>();
    private List<DepartmentTotal> departmentTotals = new ArrayList<>();

    /**
     * Initializes the employee data with hardcoded values.
     */
    public void initializeEmployees() {
        employees.add(new Employee(""E001"", ""Alice Johnson"", ""HR"", 70000.00));
        employees.add(new Employee(""E002"", ""Bob Smith"", ""IT"", 85000.00));
        employees.add(new Employee(""E003"", ""Charlie Brown"", ""Finance"", 60000.00));
        employees.add(new Employee(""E004"", ""David Wilson"", ""IT"", 95000.00));
        employees.add(new Employee(""E005"", ""Eve Davis"", ""HR"", 75000.00));
    }

    /**
     * Sorts the employees by their IDs.
     */
    public void sortEmployees() {
        Collections.sort(employees, Comparator.comparing(Employee::getId));
    }

    /**
     * Calculates the net salaries for all employees.
     */
    public void calculateNetSalaries() {
        BonusCalculator bonusCalculator = new BonusCalculator();
        for (Employee employee : employees) {
            double bonus = bonusCalculator.calculateBonus(employee.getGrossSalary());
            double deductions = employee.getGrossSalary() * DEDUCTION_RATE;
            double taxDeduction = employee.getGrossSalary() * TAX_RATE;
            double netSalary = employee.getGrossSalary() + bonus - taxDeduction - deductions;

            employee.setBonus(bonus);
            employee.setDeductions(deductions);
            employee.setTaxDeduction(taxDeduction);
            employee.setNetSalary(netSalary);
        }
    }

    /**
     * Calculates the total salaries for each department.
     */
    public void calculateDepartmentTotals() {
        for (Employee employee : employees) {
            DepartmentTotal departmentTotal = departmentTotals.stream()
                .filter(dt -> dt.getDepartmentName().equals(employee.getDepartment()))
                .findFirst()
                .orElseGet(() -> {
                    DepartmentTotal newDeptTotal = new DepartmentTotal(employee.getDepartment());
                    departmentTotals.add(newDeptTotal);
                    return newDeptTotal;
                });

            departmentTotal.setTotalSalary(departmentTotal.getTotalSalary() + employee.getNetSalary());
        }
    }

    /**
     * Displays the employee payroll information.
     */
    public void displayEmployees() {
        System.out.println(""Employee Payroll Information"");
        System.out.println(""-----------------------------"");
        for (Employee employee : employees) {
            System.out.println(""Employee ID: "" + employee.getId());
            System.out.println(""Name: "" + employee.getName());
            System.out.println(""Department: "" + employee.getDepartment());
            System.out.println(""Gross Salary: $"" + employee.getGrossSalary());
            System.out.println(""Bonus: $"" + employee.getBonus());
            System.out.println(""Deductions: $"" + employee.getDeductions());
            System.out.println(""Tax Deduction: $"" + employee.getTaxDeduction());
            System.out.println(""Net Salary: $"" + employee.getNetSalary());
            System.out.println(""-----------------------------"");
        }
    }

    /**
     * Displays the department salary totals.
     */
    public void displayDepartmentTotals() {
        System.out.println(""Department Salary Totals"");
        System.out.println(""-----------------------------"");
        for (DepartmentTotal departmentTotal : departmentTotals) {
            System.out.println(""Department: "" + departmentTotal.getDepartmentName());
            System.out.println(""Total Salary: $"" + departmentTotal.getTotalSalary());
            System.out.println(""-----------------------------"");
        }
    }

    /**
     * The main method to run the payroll system.
     *
     * @param args command-line arguments
     */
    public static void main(String[] args) {
        PayrollSystem payrollSystem = new PayrollSystem();
        payrollSystem.initializeEmployees();
        payrollSystem.sortEmployees();
        payrollSystem.calculateNetSalaries();
        payrollSystem.calculateDepartmentTotals();
        payrollSystem.displayEmployees();
        payrollSystem.displayDepartmentTotals();
    }
}"

LINK NUMBER 89

File path: java/DepartmentTotal.java
"/**
 * Represents the total salary for a department with attributes like department name and total salary.
 */
public class DepartmentTotal {
    // Attributes
    private String departmentName;
    private double totalSalary;

    /**
     * Initializes the department with the given name and sets the total salary to 0.
     *
     * @param departmentName the name of the department
     */
    public DepartmentTotal(String departmentName) {
        this.departmentName = departmentName;
        this.totalSalary = 0;
    }

    // Getters and setters for all attributes

    public String getDepartmentName() {
        return departmentName;
    }

    public void setDepartmentName(String departmentName) {
        this.departmentName = departmentName;
    }

    public double getTotalSalary() {
        return totalSalary;
    }

    public void setTotalSalary(double totalSalary) {
        this.totalSalary = totalSalary;
    }
}"

LINK NUMBER 90
Error fetching diff

LINK NUMBER 91
Error fetching diff

LINK NUMBER 92
Error fetching diff

LINK NUMBER 93

File path: src/test/java/sa/com/cloudsolutions/antikythera/generator/UnitTestGeneratorTest.java

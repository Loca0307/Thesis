{
  "results": [
    {
      "check_id": "python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret",
      "path": "temp_lang_folders/py/14471928be88bc86dba264bc503799b6ac31720f_multi_file_xml_loader.py",
      "start": {
        "line": 9,
        "col": 6,
        "offset": 169
      },
      "end": {
        "line": 14,
        "col": 2,
        "offset": 302
      },
      "extra": {
        "metavars": {},
        "message": "A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-798: Use of Hard-coded Credentials"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "owasp": [
            "A07:2021 - Identification and Authentication Failures"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
          ],
          "technology": [
            "mysql",
            "sql",
            "secrets"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Hard-coded Secrets"
          ],
          "source": "https://semgrep.dev/r/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret",
          "shortlink": "https://sg.run/oLd9",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 28360,
              "rule_id": "EwUEl5",
              "rv_id": 948005,
              "url": "https://semgrep.dev/playground/r/jQTzqWA/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret",
              "version_id": "jQTzqWA"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "c1c8936db57179940eaa70771caf37fa5d104552f5791f85248a02b6b47a56559032d7da3db30587ca9bf0f28dd6d56142880bdeaf7294b6c8a331c0a9acb606_0",
        "lines": "db = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"your_username\",\n    password=\"your_password\",\n    database=\"your_database\"\n)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
      "path": "temp_lang_folders/py/14471928be88bc86dba264bc503799b6ac31720f_multi_file_xml_loader.py",
      "start": {
        "line": 77,
        "col": 12,
        "offset": 1724
      },
      "end": {
        "line": 77,
        "col": 30,
        "offset": 1742
      },
      "extra": {
        "metavars": {
          "$...ARGS": {
            "start": {
              "line": 77,
              "col": 21,
              "offset": 1733
            },
            "end": {
              "line": 77,
              "col": 29,
              "offset": 1741
            },
            "abstract_content": "xml_file"
          }
        },
        "message": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.",
        "fix": "defusedxml.etree.ElementTree.parse(xml_file)",
        "metadata": {
          "owasp": [
            "A04:2017 - XML External Entities (XXE)",
            "A05:2021 - Security Misconfiguration"
          ],
          "cwe": [
            "CWE-611: Improper Restriction of XML External Entity Reference"
          ],
          "references": [
            "https://docs.python.org/3/library/xml.html",
            "https://github.com/tiran/defusedxml",
            "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "XML Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
          "shortlink": "https://sg.run/n3jG",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 72436,
              "rule_id": "X5Uqnx",
              "rv_id": 946406,
              "url": "https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
              "version_id": "7ZTrQyb"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "0e1875616a6061d4e2faebc2e1732c29574c48c0d6191b2e76adfc1ef83e6f29fc55fa3afceda22675bbc88db4bb47d126a9bd0fd90b8624676b00eb6f6a989e_0",
        "lines": "    tree = ET.parse(xml_file)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "path": "temp_lang_folders/py/1b65474c1152dfe2ad10ad5ddf5a7d9f36d40bcd_tutorial_manager.py",
      "start": {
        "line": 194,
        "col": 57,
        "offset": 5984
      },
      "end": {
        "line": 194,
        "col": 61,
        "offset": 5988
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 194,
              "col": 24,
              "offset": 5951
            },
            "end": {
              "line": 194,
              "col": 29,
              "offset": 5956
            },
            "abstract_content": "Popen"
          },
          "$TRUE": {
            "start": {
              "line": 194,
              "col": 57,
              "offset": 5984
            },
            "end": {
              "line": 194,
              "col": 61,
              "offset": 5988
            },
            "abstract_content": "True"
          }
        },
        "message": "Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
        "fix": "False",
        "metadata": {
          "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
            "https://docs.python.org/3/library/subprocess.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "secure default"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Command Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
          "shortlink": "https://sg.run/J92w",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9646,
              "rule_id": "DbUpz2",
              "rv_id": 946382,
              "url": "https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "version_id": "YDTvReW"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "0d737cdbec016a1df8e87fe213bf2556a2fc7f0ade3a0407e6a7893fbb36b691b39870448929b280878be9dc146cba2cf8c040fbb7b6037b7605427d865b4d05_0",
        "lines": "            subprocess.Popen(['start', '', path], shell=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
      "path": "temp_lang_folders/py/4cae4de72281c3507da0ca7040558aac8578094b_openweatheraqi.py",
      "start": {
        "line": 45,
        "col": 20,
        "offset": 1069
      },
      "end": {
        "line": 45,
        "col": 61,
        "offset": 1110
      },
      "extra": {
        "metavars": {},
        "message": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.",
        "metadata": {
          "cwe": [
            "CWE-939: Improper Authorization in Handler for Custom URL Scheme"
          ],
          "owasp": "A01:2017 - Injection",
          "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163",
          "bandit-code": "B310",
          "asvs": {
            "control_id": "5.2.4 Dynamic Code Execution Features",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
            "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "technology": [
            "python"
          ],
          "references": [
            "https://cwe.mitre.org/data/definitions/939.html"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
          "shortlink": "https://sg.run/dKZZ",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9634,
              "rule_id": "8GUj22",
              "rv_id": 946340,
              "url": "https://semgrep.dev/playground/r/w8TKJbO/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "version_id": "w8TKJbO"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "3cc8cb227481022177eec45cb509af2506d337cffe5402bdff299525ee811263a10e3ff31269bd423038d87d946de0c69ffb8ee92c09a9b77b2dae0bb66b1317_0",
        "lines": "        response = urllib.request.urlopen(self.forecast_url)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli",
      "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
      "start": {
        "line": 61,
        "col": 17,
        "offset": 2357
      },
      "end": {
        "line": 61,
        "col": 116,
        "offset": 2456
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 5,
              "offset": 4
            },
            "abstract_content": "form"
          },
          "$PROPERTY": {
            "start": {
              "line": 48,
              "col": 27,
              "offset": 1913
            },
            "end": {
              "line": 48,
              "col": 31,
              "offset": 1917
            },
            "abstract_content": "form"
          },
          "$O": {
            "start": {
              "line": 61,
              "col": 17,
              "offset": 2357
            },
            "end": {
              "line": 61,
              "col": 23,
              "offset": 2363
            },
            "abstract_content": "cursor"
          },
          "$SINK": {
            "start": {
              "line": 61,
              "col": 32,
              "offset": 2372
            },
            "end": {
              "line": 61,
              "col": 89,
              "offset": 2429
            },
            "abstract_content": "\"INSERT INTO authors (ref_id, author_name) VALUES (?, ?)\""
          }
        },
        "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "HIGH",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2020-top25": true,
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "display-name": "SQL Injection with prestodb via flask",
          "functional-categories": [
            "db::sink::sql-or-nosql-query::prestodb",
            "web::source::cookie::flask",
            "web::source::form-data::flask",
            "web::source::form-data::flask-wtf",
            "web::source::form-data::wtforms",
            "web::source::header::flask",
            "web::source::http-body::flask",
            "web::source::http-params::flask",
            "web::source::url-path-params::flask"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "technology": [
            "flask",
            "flask-wtf",
            "prestodb",
            "python",
            "web",
            "wtforms"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli",
          "shortlink": "https://sg.run/Ab2Y4",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 151050,
              "rule_id": "qNU2nYq",
              "rv_id": 1015020,
              "url": "https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli",
              "version_id": "w8TKenE"
            }
          }
        },
        "severity": "CRITICAL",
        "fingerprint": "edb606cfc474be066f9d967a3d1810e507f7bda94a1cafd93755d365aeba3f358a856b31ac6b90b6dd7e863fb99bbe834453cb2d3e3d08852cc14ba751a8ff0b_0",
        "lines": "                cursor.execute(\"INSERT INTO authors (ref_id, author_name) VALUES (?, ?)\", (ref_id, author.strip()))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 48,
                  "col": 19,
                  "offset": 1905
                },
                "end": {
                  "line": 48,
                  "col": 31,
                  "offset": 1917
                }
              },
              "request.form"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 48,
                  "col": 9,
                  "offset": 1895
                },
                "end": {
                  "line": 48,
                  "col": 16,
                  "offset": 1902
                }
              },
              "content": "authors"
            },
            {
              "location": {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 59,
                  "col": 13,
                  "offset": 2291
                },
                "end": {
                  "line": 59,
                  "col": 19,
                  "offset": 2297
                }
              },
              "content": "author"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 61,
                  "col": 17,
                  "offset": 2357
                },
                "end": {
                  "line": 61,
                  "col": 116,
                  "offset": 2456
                }
              },
              "cursor.execute(\"INSERT INTO authors (ref_id, author_name) VALUES (?, ?)\", (ref_id, author.strip()))"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli",
      "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
      "start": {
        "line": 61,
        "col": 17,
        "offset": 2357
      },
      "end": {
        "line": 61,
        "col": 116,
        "offset": 2456
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 5,
              "offset": 4
            },
            "abstract_content": "form"
          },
          "$PROPERTY": {
            "start": {
              "line": 48,
              "col": 27,
              "offset": 1913
            },
            "end": {
              "line": 48,
              "col": 31,
              "offset": 1917
            },
            "abstract_content": "form"
          },
          "$O": {
            "start": {
              "line": 61,
              "col": 17,
              "offset": 2357
            },
            "end": {
              "line": 61,
              "col": 23,
              "offset": 2363
            },
            "abstract_content": "cursor"
          },
          "$SINK": {
            "start": {
              "line": 61,
              "col": 32,
              "offset": 2372
            },
            "end": {
              "line": 61,
              "col": 89,
              "offset": 2429
            },
            "abstract_content": "\"INSERT INTO authors (ref_id, author_name) VALUES (?, ?)\""
          }
        },
        "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "HIGH",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2020-top25": true,
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "display-name": "SQL Injection with prestodb via flask-without-url-path",
          "functional-categories": [
            "db::sink::sql-or-nosql-query::prestodb",
            "web::source::cookie::flask",
            "web::source::form-data::flask",
            "web::source::form-data::flask-wtf",
            "web::source::form-data::wtforms",
            "web::source::header::flask",
            "web::source::http-body::flask",
            "web::source::http-params::flask",
            "web::source::url-path-params::flask"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "technology": [
            "flask",
            "flask-wtf",
            "prestodb",
            "python",
            "web",
            "wtforms"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli",
          "shortlink": "https://sg.run/BYXN5",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 151051,
              "rule_id": "lBU4OQB",
              "rv_id": 1015021,
              "url": "https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli",
              "version_id": "xyTqYZO"
            }
          }
        },
        "severity": "CRITICAL",
        "fingerprint": "fc14509e3e72afdcdfcb9934d9b4f4c67ca387680ae3845a22e901128f40b3b1913740525dd95f91904a3cd836ce11960fabe08c8e53670488dbdedbfb9fb71b_0",
        "lines": "                cursor.execute(\"INSERT INTO authors (ref_id, author_name) VALUES (?, ?)\", (ref_id, author.strip()))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 48,
                  "col": 19,
                  "offset": 1905
                },
                "end": {
                  "line": 48,
                  "col": 31,
                  "offset": 1917
                }
              },
              "request.form"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 48,
                  "col": 9,
                  "offset": 1895
                },
                "end": {
                  "line": 48,
                  "col": 16,
                  "offset": 1902
                }
              },
              "content": "authors"
            },
            {
              "location": {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 59,
                  "col": 13,
                  "offset": 2291
                },
                "end": {
                  "line": 59,
                  "col": 19,
                  "offset": 2297
                }
              },
              "content": "author"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
                "start": {
                  "line": 61,
                  "col": 17,
                  "offset": 2357
                },
                "end": {
                  "line": 61,
                  "col": 116,
                  "offset": 2456
                }
              },
              "cursor.execute(\"INSERT INTO authors (ref_id, author_name) VALUES (?, ?)\", (ref_id, author.strip()))"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.debug.debug-flask.active-debug-code-flask",
      "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
      "start": {
        "line": 113,
        "col": 5,
        "offset": 4293
      },
      "end": {
        "line": 113,
        "col": 24,
        "offset": 4312
      },
      "extra": {
        "metavars": {},
        "message": "The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "display-name": "Active Debug Code in Flask",
          "functional-categories": [
            "debug::search::active-debug-code"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/3.0.x/debugging/"
          ],
          "technology": [
            "flask",
            "python"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask",
          "shortlink": "https://sg.run/lBbpB",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 116513,
              "rule_id": "zdUKBnK",
              "rv_id": 947918,
              "url": "https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask",
              "version_id": "ZRT3q9v"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "7fd70a34af6aa44b4825fabdde4b00423d4f027c4b5ed1b22998502ffe88afe54be06c67c85f81116215e188842bc9b84be54a19cdb7f54d630d9121b20722d9_0",
        "lines": "    app.run(debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "temp_lang_folders/py/4f6180c95e8d710eb68d779c741d4eaeab8556e6_app.py",
      "start": {
        "line": 113,
        "col": 5,
        "offset": 4293
      },
      "end": {
        "line": 113,
        "col": 24,
        "offset": 4312
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 113,
              "col": 5,
              "offset": 4293
            },
            "end": {
              "line": 113,
              "col": 8,
              "offset": 4296
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 5,
                "col": 7,
                "offset": 135
              },
              "svalue_end": {
                "line": 5,
                "col": 54,
                "offset": 182
              },
              "svalue_abstract_content": "Flask(__name__ template_folder\"../templates\")"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "5edad85b341b47c1ead35db96f7fc6975ef8b831c83deb89093a3d314ac6c503299b6f5b51fec6209aacf80ec0e79eaed7f43a259d5d21f6ff316c22d31dd5d6_0",
        "lines": "    app.run(debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
      "path": "temp_lang_folders/py/603c685a0319cf47f40b12f2146a647712fff5c8_train.py",
      "start": {
        "line": 42,
        "col": 17,
        "offset": 1362
      },
      "end": {
        "line": 42,
        "col": 43,
        "offset": 1388
      },
      "extra": {
        "metavars": {},
        "message": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX",
        "metadata": {
          "category": "security",
          "cwe": "CWE-502: Deserialization of Untrusted Data",
          "subcategory": [
            "vuln"
          ],
          "confidence": "MEDIUM",
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "technology": [
            "pytorch"
          ],
          "description": "Potential arbitrary code execution from `PyTorch` functions reliant on pickling",
          "references": [
            "https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/"
          ],
          "license": "AGPL-3.0 license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
          "shortlink": "https://sg.run/NwQy",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 17171,
              "rule_id": "JDU6WD",
              "rv_id": 833304,
              "url": "https://semgrep.dev/playground/r/qkTQnJ3/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "version_id": "qkTQnJ3"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "3819c4ed46834861af0ddd31fd1267a1715483250cf079511df4a9c908f10b02b803c6e2b1b97d83a57e4ae864a25de423471bede79fcff9c4c6596a30031449_0",
        "lines": "        state = torch.load(model_filename)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
      "path": "temp_lang_folders/py/603c685a0319cf47f40b12f2146a647712fff5c8_train.py",
      "start": {
        "line": 85,
        "col": 9,
        "offset": 3326
      },
      "end": {
        "line": 90,
        "col": 27,
        "offset": 3545
      },
      "extra": {
        "metavars": {},
        "message": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX",
        "metadata": {
          "category": "security",
          "cwe": "CWE-502: Deserialization of Untrusted Data",
          "subcategory": [
            "vuln"
          ],
          "confidence": "MEDIUM",
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "technology": [
            "pytorch"
          ],
          "description": "Potential arbitrary code execution from `PyTorch` functions reliant on pickling",
          "references": [
            "https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/"
          ],
          "license": "AGPL-3.0 license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
          "shortlink": "https://sg.run/NwQy",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 17171,
              "rule_id": "JDU6WD",
              "rv_id": 833304,
              "url": "https://semgrep.dev/playground/r/qkTQnJ3/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "version_id": "qkTQnJ3"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "3819c4ed46834861af0ddd31fd1267a1715483250cf079511df4a9c908f10b02b803c6e2b1b97d83a57e4ae864a25de423471bede79fcff9c4c6596a30031449_1",
        "lines": "        torch.save({\n            'epoch': epoch,\n            'model_state_dict': model.state_dict(),\n            'optimizer_state_dict': optimizer.state_dict(),\n            'global_step': global_step,\n        }, model_filename)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.compatibility.python37.python37-compatibility-importlib2",
      "path": "temp_lang_folders/py/b9aa320028e42c748712590a7f71d46292d4a428_load_fallbacks.py",
      "start": {
        "line": 4,
        "col": 1,
        "offset": 47
      },
      "end": {
        "line": 4,
        "col": 27,
        "offset": 73
      },
      "extra": {
        "metavars": {},
        "message": "Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.",
        "metadata": {
          "category": "compatibility",
          "technology": [
            "python"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib2",
          "shortlink": "https://sg.run/eL3y",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9576,
              "rule_id": "L1Uy0n",
              "rv_id": 946266,
              "url": "https://semgrep.dev/playground/r/qkT4jn5/python.lang.compatibility.python37.python37-compatibility-importlib2",
              "version_id": "qkT4jn5"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "042a003b38c7268b1060081283d5252c7681f5f03a83a3af13af19b93979660d2bed95bb7c45354203371d88e5b9a0b7420b96d1ca52c28ee232ea04af6b5d4b_0",
        "lines": "import importlib.resources",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "temp_lang_folders/py/c8793b87d397052fbab1a6b5157e61c297c77fdb_test_misc.py",
      "start": {
        "line": 16,
        "col": 19,
        "offset": 326
      },
      "end": {
        "line": 16,
        "col": 62,
        "offset": 369
      },
      "extra": {
        "metavars": {
          "$CONNECTION": {
            "start": {
              "line": 16,
              "col": 19,
              "offset": 326
            },
            "end": {
              "line": 16,
              "col": 22,
              "offset": 329
            },
            "abstract_content": "gdb"
          }
        },
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 946452,
              "url": "https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "8KTKj19"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "a0c4a6e959ea447c8da95eba10bf0573de2846f45aba0894e9c6379a3ca7939b2167b93aef59343fe1a837cb474594b72849495b3bbf29d32833fc2ca18c3ccc_0",
        "lines": "        gdb_out = gdb.execute(f\"help {name}\", to_string=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "temp_lang_folders/py/c8793b87d397052fbab1a6b5157e61c297c77fdb_test_misc.py",
      "start": {
        "line": 17,
        "col": 24,
        "offset": 393
      },
      "end": {
        "line": 17,
        "col": 65,
        "offset": 434
      },
      "extra": {
        "metavars": {
          "$CONNECTION": {
            "start": {
              "line": 17,
              "col": 24,
              "offset": 393
            },
            "end": {
              "line": 17,
              "col": 27,
              "offset": 396
            },
            "abstract_content": "gdb"
          }
        },
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 946452,
              "url": "https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "8KTKj19"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "a0c4a6e959ea447c8da95eba10bf0573de2846f45aba0894e9c6379a3ca7939b2167b93aef59343fe1a837cb474594b72849495b3bbf29d32833fc2ca18c3ccc_1",
        "lines": "        argparse_out = gdb.execute(f\"{name} -h\", to_string=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
      "path": "temp_lang_folders/py/d96c37504dc7124da9f9f43c69989ce4b2ac37a4_VAEs_code_by_chatgpt.py",
      "start": {
        "line": 98,
        "col": 14,
        "offset": 3056
      },
      "end": {
        "line": 98,
        "col": 61,
        "offset": 3103
      },
      "extra": {
        "metavars": {},
        "message": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency",
        "metadata": {
          "category": "security",
          "cwe": "CWE-676: Use of Potentially Dangerous Function",
          "subcategory": [
            "audit"
          ],
          "confidence": "HIGH",
          "likelihood": "LOW",
          "impact": "LOW",
          "technology": [
            "pytorch"
          ],
          "description": "`PyTorch` memory not automatically pinned",
          "references": [
            "https://pytorch.org/docs/stable/data.html#memory-pinning"
          ],
          "license": "AGPL-3.0 license",
          "vulnerability_class": [
            "Dangerous Method or Function"
          ],
          "source": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
          "shortlink": "https://sg.run/jz5N",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 17165,
              "rule_id": "WAUN1Z",
              "rv_id": 833289,
              "url": "https://semgrep.dev/playground/r/gETy20E/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "version_id": "gETy20E"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "a9ecdca0f2ac9b66bdccab16a02c3f477544744320ece3cbe50b71e4b38112a51e793063eff51c4d9ebac539efb10660a64fe026a46b526078f4ace34e78401e_0",
        "lines": "dataloader = DataLoader(dataset, batch_size=4, shuffle=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "temp_lang_folders/py/dc3a59929640bc9ddaed8d8c9566ce7849a961fb_test_network_simplifier.py",
      "start": {
        "line": 15,
        "col": 9,
        "offset": 504
      },
      "end": {
        "line": 15,
        "col": 26,
        "offset": 521
      },
      "extra": {
        "metavars": {
          "$X": {
            "start": {
              "line": 14,
              "col": 57,
              "offset": 470
            },
            "end": {
              "line": 14,
              "col": 79,
              "offset": 492
            },
            "abstract_content": "tuple(remaining_links)"
          },
          "$DB": {
            "start": {
              "line": 15,
              "col": 9,
              "offset": 504
            },
            "end": {
              "line": 15,
              "col": 13,
              "offset": 508
            },
            "abstract_content": "conn",
            "propagated_value": {
              "svalue_start": {
                "line": 13,
                "col": 10,
                "offset": 383
              },
              "svalue_end": {
                "line": 13,
                "col": 31,
                "offset": 404
              },
              "svalue_abstract_content": "project.db_connection"
            }
          },
          "$SQL": {
            "start": {
              "line": 15,
              "col": 22,
              "offset": 517
            },
            "end": {
              "line": 15,
              "col": 25,
              "offset": 520
            },
            "abstract_content": "qry",
            "propagated_value": {
              "svalue_start": {
                "line": 14,
                "col": 15,
                "offset": 428
              },
              "svalue_end": {
                "line": 14,
                "col": 82,
                "offset": 495
              },
              "svalue_abstract_content": "f\"DELETE FROM links WHERE link_id NOT IN {tuple(remaining_links)};\""
            }
          }
        },
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9637,
              "rule_id": "3qUP9k",
              "rv_id": 946343,
              "url": "https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "version_id": "e1T98KK"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "7e7fe7d7ef9e30b9a433bd68cb79ae9c0724f12e20c8cfb8c05f9c8f66ff349136f60eb0e4c521f63af8e5c4973b4ae68240a967fabf3d6802ea2d199ebf2d8e_0",
        "lines": "        conn.execute(qry)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "temp_lang_folders/py/dc3a59929640bc9ddaed8d8c9566ce7849a961fb_test_network_simplifier.py",
      "start": {
        "line": 15,
        "col": 9,
        "offset": 504
      },
      "end": {
        "line": 15,
        "col": 26,
        "offset": 521
      },
      "extra": {
        "metavars": {
          "$CONNECTION": {
            "start": {
              "line": 15,
              "col": 9,
              "offset": 504
            },
            "end": {
              "line": 15,
              "col": 13,
              "offset": 508
            },
            "abstract_content": "conn",
            "propagated_value": {
              "svalue_start": {
                "line": 13,
                "col": 10,
                "offset": 383
              },
              "svalue_end": {
                "line": 13,
                "col": 31,
                "offset": 404
              },
              "svalue_abstract_content": "project.db_connection"
            }
          },
          "$QUERY": {
            "start": {
              "line": 15,
              "col": 22,
              "offset": 517
            },
            "end": {
              "line": 15,
              "col": 25,
              "offset": 520
            },
            "abstract_content": "qry",
            "propagated_value": {
              "svalue_start": {
                "line": 14,
                "col": 15,
                "offset": 428
              },
              "svalue_end": {
                "line": 14,
                "col": 82,
                "offset": 495
              },
              "svalue_abstract_content": "f\"DELETE FROM links WHERE link_id NOT IN {tuple(remaining_links)};\""
            }
          }
        },
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 946452,
              "url": "https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "8KTKj19"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "6239372254baad2a0296225a2bd84b8d7ec71c3c66c9dda916811cc7a9a985fd59e552555ce28e6ec637369a4cccfe60244567659b9853e8da514fdc5e7a188f_0",
        "lines": "        conn.execute(qry)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "path": "temp_lang_folders/py/df9e0c1457b9e921b205344fcce5c6e3f87decc3_app_tab_service.py",
      "start": {
        "line": 57,
        "col": 94,
        "offset": 1702
      },
      "end": {
        "line": 57,
        "col": 98,
        "offset": 1706
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 57,
              "col": 33,
              "offset": 1641
            },
            "end": {
              "line": 57,
              "col": 36,
              "offset": 1644
            },
            "abstract_content": "run"
          },
          "$TRUE": {
            "start": {
              "line": 57,
              "col": 94,
              "offset": 1702
            },
            "end": {
              "line": 57,
              "col": 98,
              "offset": 1706
            },
            "abstract_content": "True"
          }
        },
        "message": "Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
        "fix": "False",
        "metadata": {
          "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
            "https://docs.python.org/3/library/subprocess.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "secure default"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Command Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
          "shortlink": "https://sg.run/J92w",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9646,
              "rule_id": "DbUpz2",
              "rv_id": 946382,
              "url": "https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "version_id": "YDTvReW"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "e1772b95343397cd8fa3ac256482053547eae258626a35519ef6aba56b7b8b2b307a2cc311383bede1909df7332ad5e7b13d966053c3197de6d21488657908f0_0",
        "lines": "            result = subprocess.run(\" \".join(command), capture_output=True, text=True, shell=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "path": "temp_lang_folders/py/df9e0c1457b9e921b205344fcce5c6e3f87decc3_app_tab_service.py",
      "start": {
        "line": 108,
        "col": 103,
        "offset": 3702
      },
      "end": {
        "line": 108,
        "col": 107,
        "offset": 3706
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 108,
              "col": 37,
              "offset": 3636
            },
            "end": {
              "line": 108,
              "col": 40,
              "offset": 3639
            },
            "abstract_content": "run"
          },
          "$TRUE": {
            "start": {
              "line": 108,
              "col": 103,
              "offset": 3702
            },
            "end": {
              "line": 108,
              "col": 107,
              "offset": 3706
            },
            "abstract_content": "True"
          }
        },
        "message": "Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
        "fix": "False",
        "metadata": {
          "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess",
            "https://docs.python.org/3/library/subprocess.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "secure default"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Command Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
          "shortlink": "https://sg.run/J92w",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9646,
              "rule_id": "DbUpz2",
              "rv_id": 946382,
              "url": "https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "version_id": "YDTvReW"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "e1772b95343397cd8fa3ac256482053547eae258626a35519ef6aba56b7b8b2b307a2cc311383bede1909df7332ad5e7b13d966053c3197de6d21488657908f0_1",
        "lines": "                result = subprocess.run(\" \".join(fund_command), capture_output=True, text=True, shell=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "temp_lang_folders/py/e1649c55808f536cad5e2e0e3d67b0cf8eb0ddb9_utils.py",
      "start": {
        "line": 81,
        "col": 9,
        "offset": 2637
      },
      "end": {
        "line": 81,
        "col": 32,
        "offset": 2660
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 81,
              "col": 16,
              "offset": 2644
            },
            "end": {
              "line": 81,
              "col": 20,
              "offset": 2648
            },
            "abstract_content": "dump"
          }
        },
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9675,
              "rule_id": "EwU2BJ",
              "rv_id": 946397,
              "url": "https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle",
              "version_id": "w8TKJL9"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "9f4e0b1dddc280c8e476fd8eccc093e1c0d2f035d0bd69200e93cd6cdd372ea00f6e2bb4c17930570a319f4bb3d5ddbf6435835be3f73cf587a7a956dae63615_0",
        "lines": "        pickle.dump(obj, f_out)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
      "path": "temp_lang_folders/py/ee2001f04fc85adc074fca7e97a65f92a9574607_ha-tower-discovery.py",
      "start": {
        "line": 41,
        "col": 16,
        "offset": 1455
      },
      "end": {
        "line": 41,
        "col": 51,
        "offset": 1490
      },
      "extra": {
        "metavars": {},
        "message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
          "shortlink": "https://sg.run/RoKe",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9549,
              "rule_id": "qNUjN2",
              "rv_id": 946237,
              "url": "https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "version_id": "NdTqkwG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "55d100ac8ec39b91cfb75e0d45906b4893f6a113e1c190c2f62775edab9ef5a46001d501754c1c25cd256471e2a35c95b9f56c5a92a860b8d7c8a23947e0d722_0",
        "lines": "template_env = Environment(loader=template_loader)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
      "path": "temp_lang_folders/py/ee2001f04fc85adc074fca7e97a65f92a9574607_ha-tower-discovery.py",
      "start": {
        "line": 61,
        "col": 24,
        "offset": 2068
      },
      "end": {
        "line": 61,
        "col": 54,
        "offset": 2098
      },
      "extra": {
        "metavars": {
          "$ENV": {
            "start": {
              "line": 60,
              "col": 20,
              "offset": 1989
            },
            "end": {
              "line": 60,
              "col": 32,
              "offset": 2001
            },
            "abstract_content": "template_env",
            "propagated_value": {
              "svalue_start": {
                "line": 41,
                "col": 16,
                "offset": 1455
              },
              "svalue_end": {
                "line": 41,
                "col": 51,
                "offset": 1490
              },
              "svalue_abstract_content": "Environment(loader template_loader)"
            }
          },
          "$TEMPLATE": {
            "start": {
              "line": 61,
              "col": 24,
              "offset": 2068
            },
            "end": {
              "line": 61,
              "col": 32,
              "offset": 2076
            },
            "abstract_content": "template",
            "propagated_value": {
              "svalue_start": {
                "line": 60,
                "col": 20,
                "offset": 1989
              },
              "svalue_end": {
                "line": 60,
                "col": 75,
                "offset": 2044
              },
              "svalue_abstract_content": "template_env.get_template(device[\"firmware\"]+\".yaml\")"
            }
          }
        },
        "message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://jinja.palletsprojects.com/en/2.11.x/api/#basics"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
          "shortlink": "https://sg.run/RoKe",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9549,
              "rule_id": "qNUjN2",
              "rv_id": 946237,
              "url": "https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "version_id": "NdTqkwG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "7b826c89b32ac1a8f8ce0715cf366ed3498fbf5978acfc1bf584b84fc1fe88953533f7f18fa02c3f5ba2cc3afd0102b9a169e7d9eb92b136e4d5579f04aa5207_0",
        "lines": "        json_message = template.render(device=device)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
      "path": "temp_lang_folders/js/01adcb98584b1087e2ec705df07475a4f53cbe17_server.js",
      "start": {
        "line": 6,
        "col": 16,
        "offset": 94
      },
      "end": {
        "line": 6,
        "col": 20,
        "offset": 98
      },
      "extra": {
        "metavars": {
          "$HTTP": {
            "start": {
              "line": 6,
              "col": 16,
              "offset": 94
            },
            "end": {
              "line": 6,
              "col": 20,
              "offset": 98
            },
            "abstract_content": "http",
            "propagated_value": {
              "svalue_start": {
                "line": 1,
                "col": 14,
                "offset": 13
              },
              "svalue_end": {
                "line": 1,
                "col": 29,
                "offset": 28
              },
              "svalue_abstract_content": "require('http')"
            }
          },
          "$FUNC": {
            "start": {
              "line": 6,
              "col": 21,
              "offset": 99
            },
            "end": {
              "line": 6,
              "col": 33,
              "offset": 111
            },
            "abstract_content": "createServer"
          }
        },
        "message": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "category": "security",
          "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
          "owasp": [
            "A02:2021 - Cryptographic Failures",
            "A03:2017 - Sensitive Data Exposure"
          ],
          "references": [
            "https://nodejs.org/api/http.html#http_class_http_agent",
            "https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY"
          ],
          "subcategory": [
            "audit"
          ],
          "technology": [
            "node.js"
          ],
          "vulnerability": "Insecure Transport",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Mishandled Sensitive Information"
          ],
          "source": "https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
          "shortlink": "https://sg.run/x1zL",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9430,
              "rule_id": "7KUQAE",
              "rv_id": 946074,
              "url": "https://semgrep.dev/playground/r/WrTEo9B/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
              "version_id": "WrTEo9B"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "dfa8252361f4506e645848b737f1850530fc3021ce48d8106f322f071b4315e9e67c66b73e992068e5cfaaf5a51880dbd7c6457ed9fdd58234274fcd19402ad2_0",
        "lines": "const server = http.createServer((req, res) => {",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
      "path": "temp_lang_folders/js/15b0b92ca94a8c6ac2b6f92d09a9dd084993dd6b_app_11.js",
      "start": {
        "line": 280,
        "col": 19,
        "offset": 8544
      },
      "end": {
        "line": 280,
        "col": 52,
        "offset": 8577
      },
      "extra": {
        "metavars": {
          "$ARG": {
            "start": {
              "line": 277,
              "col": 27,
              "offset": 8407
            },
            "end": {
              "line": 277,
              "col": 34,
              "offset": 8414
            },
            "abstract_content": "keyword"
          }
        },
        "message": "RegExp() called with a `keyword` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "metadata": {
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "cwe": [
            "CWE-1333: Inefficient Regular Expression Complexity"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
          ],
          "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js",
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Denial-of-Service (DoS)"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
          "shortlink": "https://sg.run/gr65",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 12685,
              "rule_id": "zdU1gD",
              "rv_id": 945869,
              "url": "https://semgrep.dev/playground/r/A8TJz19/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
              "version_id": "A8TJz19"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "cdf4023c24c74b34bb75b88d0da38448df03a06bbd3c2a152dafd7c861a8c98d43420cef470e32ad160dc6c31497864460182caaece5b8000f2b68fe53a19925_0",
        "lines": "  const pattern = new RegExp(flexiblePattern, \"gi\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/15b0b92ca94a8c6ac2b6f92d09a9dd084993dd6b_app_11.js",
                "start": {
                  "line": 277,
                  "col": 27,
                  "offset": 8407
                },
                "end": {
                  "line": 277,
                  "col": 34,
                  "offset": 8414
                }
              },
              "keyword"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/js/15b0b92ca94a8c6ac2b6f92d09a9dd084993dd6b_app_11.js",
                "start": {
                  "line": 277,
                  "col": 27,
                  "offset": 8407
                },
                "end": {
                  "line": 277,
                  "col": 34,
                  "offset": 8414
                }
              },
              "content": "keyword"
            },
            {
              "location": {
                "path": "temp_lang_folders/js/15b0b92ca94a8c6ac2b6f92d09a9dd084993dd6b_app_11.js",
                "start": {
                  "line": 278,
                  "col": 9,
                  "offset": 8427
                },
                "end": {
                  "line": 278,
                  "col": 21,
                  "offset": 8439
                }
              },
              "content": "keywordParts"
            },
            {
              "location": {
                "path": "temp_lang_folders/js/15b0b92ca94a8c6ac2b6f92d09a9dd084993dd6b_app_11.js",
                "start": {
                  "line": 279,
                  "col": 9,
                  "offset": 8480
                },
                "end": {
                  "line": 279,
                  "col": 24,
                  "offset": 8495
                }
              },
              "content": "flexiblePattern"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/15b0b92ca94a8c6ac2b6f92d09a9dd084993dd6b_app_11.js",
                "start": {
                  "line": 280,
                  "col": 19,
                  "offset": 8544
                },
                "end": {
                  "line": 280,
                  "col": 52,
                  "offset": 8577
                }
              },
              "new RegExp(flexiblePattern, \"gi\")"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.firebase.firebase-hardcoded-secret.firebase-hardcoded-secret",
      "path": "temp_lang_folders/js/2083a2279ffd9f39593e6cc095edc51844200d51_firebase.js",
      "start": {
        "line": 15,
        "col": 13,
        "offset": 470
      },
      "end": {
        "line": 15,
        "col": 42,
        "offset": 499
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 13,
              "offset": 12
            },
            "abstract_content": "firebase/app"
          },
          "$IMPORT": {
            "start": {
              "line": 1,
              "col": 32,
              "offset": 31
            },
            "end": {
              "line": 1,
              "col": 44,
              "offset": 43
            },
            "abstract_content": "firebase/app"
          },
          "$SQL": {
            "start": {
              "line": 15,
              "col": 13,
              "offset": 470
            },
            "end": {
              "line": 15,
              "col": 26,
              "offset": 483
            },
            "abstract_content": "initializeApp"
          },
          "$FOO": {
            "start": {
              "line": 15,
              "col": 27,
              "offset": 484
            },
            "end": {
              "line": 15,
              "col": 41,
              "offset": 498
            },
            "abstract_content": "firebaseConfig",
            "propagated_value": {
              "svalue_start": {
                "line": 6,
                "col": 24,
                "offset": 213
              },
              "svalue_end": {
                "line": 13,
                "col": 2,
                "offset": 455
              },
              "svalue_abstract_content": "{apiKey\"YOUR_API_KEY\"authDomain\"YOUR_PROJECT_ID.firebaseapp.com\"projectId\"YOUR_PROJECT_ID\"storageBucket\"YOUR_PROJECT_ID.appspot.com\"messagingSenderId\"YOUR_MESSAGING_SENDER_ID\"appId\"YOUR_APP_ID\"}"
            }
          }
        },
        "message": "A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "interfile": true,
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-798: Use of Hard-coded Credentials"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "owasp": [
            "A07:2021 - Identification and Authentication Failures"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
          ],
          "technology": [
            "firebase",
            "sql",
            "nodejs",
            "secrets"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Hard-coded Secrets"
          ],
          "source": "https://semgrep.dev/r/javascript.firebase.firebase-hardcoded-secret.firebase-hardcoded-secret",
          "shortlink": "https://sg.run/kvjA",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 37928,
              "rule_id": "0oU9Yx",
              "rv_id": 947622,
              "url": "https://semgrep.dev/playground/r/QkTZ6Qo/javascript.firebase.firebase-hardcoded-secret.firebase-hardcoded-secret",
              "version_id": "QkTZ6Qo"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "5b52bc936affc041745512e1b63aed90572a1b010fa31a52dbdebb64517cf66f11880ae419b053e0d6de90ae6fb482de8c72e65120e936fbd46260017fcd6ec6_0",
        "lines": "const app = initializeApp(firebaseConfig);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/2083a2279ffd9f39593e6cc095edc51844200d51_firebase.js",
                "start": {
                  "line": 6,
                  "col": 24,
                  "offset": 213
                },
                "end": {
                  "line": 13,
                  "col": 2,
                  "offset": 455
                }
              },
              "{\n    apiKey: \"YOUR_API_KEY\",\n    authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n    projectId: \"YOUR_PROJECT_ID\",\n    storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n    messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n    appId: \"YOUR_APP_ID\"\n}"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/js/2083a2279ffd9f39593e6cc095edc51844200d51_firebase.js",
                "start": {
                  "line": 6,
                  "col": 7,
                  "offset": 196
                },
                "end": {
                  "line": 6,
                  "col": 21,
                  "offset": 210
                }
              },
              "content": "firebaseConfig"
            },
            {
              "location": {
                "path": "temp_lang_folders/js/2083a2279ffd9f39593e6cc095edc51844200d51_firebase.js",
                "start": {
                  "line": 6,
                  "col": 7,
                  "offset": 196
                },
                "end": {
                  "line": 6,
                  "col": 21,
                  "offset": 210
                }
              },
              "content": "firebaseConfig"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/2083a2279ffd9f39593e6cc095edc51844200d51_firebase.js",
                "start": {
                  "line": 15,
                  "col": 13,
                  "offset": 470
                },
                "end": {
                  "line": 15,
                  "col": 42,
                  "offset": 499
                }
              },
              "initializeApp(firebaseConfig)"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.browser.security.insecure-document-method.insecure-document-method",
      "path": "temp_lang_folders/js/a2ce3941a6bda7ac3e0bbd079aa08e6afd322b05_timers.js",
      "start": {
        "line": 10,
        "col": 9,
        "offset": 489
      },
      "end": {
        "line": 18,
        "col": 11,
        "offset": 830
      },
      "extra": {
        "metavars": {
          "$EL": {
            "start": {
              "line": 10,
              "col": 9,
              "offset": 489
            },
            "end": {
              "line": 10,
              "col": 17,
              "offset": 497
            },
            "abstract_content": "timerDiv"
          },
          "$HTML": {
            "start": {
              "line": 10,
              "col": 30,
              "offset": 510
            },
            "end": {
              "line": 18,
              "col": 9,
              "offset": 828
            },
            "abstract_content": "`\n            <input type=\"text\" value=\"i\">\n            <div class=\"time\">defaultTime</div>\n            <div class=\"buttons\">\n                <button class=\"start\">Start</button>\n                <button class=\"pause\">Pause</button>\n                <button class=\"reset\">Reset</button>\n            </div>\n        "
          }
        },
        "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "browser"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method",
          "shortlink": "https://sg.run/LwA9",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9239,
              "rule_id": "ReUg41",
              "rv_id": 945779,
              "url": "https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method",
              "version_id": "zyTlk9P"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "4eb4366ff37f9c725fca1a3151ae545f002f05b6c59946ff89c2db4c47c0984ebea6784c935e93b4c505ff32c31748edc51da23919ab820adc1c71c5275a2589_0",
        "lines": "        timerDiv.innerHTML = `\n            <input type=\"text\" value=\"${i}\">\n            <div class=\"time\">${defaultTime}</div>\n            <div class=\"buttons\">\n                <button class=\"start\">Start</button>\n                <button class=\"pause\">Pause</button>\n                <button class=\"reset\">Reset</button>\n            </div>\n        `;",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 6,
        "col": 7,
        "offset": 168
      },
      "end": {
        "line": 6,
        "col": 22,
        "offset": 183
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 6,
              "col": 7,
              "offset": 168
            },
            "end": {
              "line": 6,
              "col": 10,
              "offset": 171
            },
            "abstract_content": "app"
          },
          "$EXPRESS": {
            "start": {
              "line": 6,
              "col": 13,
              "offset": 174
            },
            "end": {
              "line": 6,
              "col": 20,
              "offset": 181
            },
            "abstract_content": "express"
          }
        },
        "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
        "metadata": {
          "category": "security",
          "references": [
            "https://www.npmjs.com/package/csurf",
            "https://www.npmjs.com/package/csrf",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
          ],
          "cwe": [
            "CWE-352: Cross-Site Request Forgery (CSRF)"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "technology": [
            "javascript",
            "typescript",
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site Request Forgery (CSRF)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
          "shortlink": "https://sg.run/BxzR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 22551,
              "rule_id": "wdUKEq",
              "rv_id": 945789,
              "url": "https://semgrep.dev/playground/r/NdTqkvB/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "version_id": "NdTqkvB"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "647bb0b9a179d6e564d9b95d1983e19ba9254fd38f6d6d64b911c82cc4318ec7857fc209d52c9ca3ae58989fe2430f045f5a2d8eccbfcdd0912526e59d67e1f1_0",
        "lines": "const app = express();",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 381
      },
      "end": {
        "line": 22,
        "col": 3,
        "offset": 517
      },
      "extra": {
        "metavars": {
          "$SESSION": {
            "start": {
              "line": 17,
              "col": 9,
              "offset": 381
            },
            "end": {
              "line": 17,
              "col": 16,
              "offset": 388
            },
            "abstract_content": "session"
          }
        },
        "message": "Don\u2019t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.",
        "metadata": {
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name",
          "shortlink": "https://sg.run/1Z5x",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9266,
              "rule_id": "eqU8k2",
              "rv_id": 945791,
              "url": "https://semgrep.dev/playground/r/w8TKJqK/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name",
              "version_id": "w8TKJqK"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "71e6b16ea3eaa3be8b8cfb72a3e1b0d87b3fc0ac8e88f74609cd98febb158997fcdcccd5cc1b1f57b8faa00180e887774d67a8f5faba9aeacf526cf7eb71c674_0",
        "lines": "app.use(session({\n  secret: 'super-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { maxAge: 60000 } // 1 minute for demo\n}));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 381
      },
      "end": {
        "line": 22,
        "col": 3,
        "offset": 517
      },
      "extra": {
        "metavars": {
          "$SESSION": {
            "start": {
              "line": 17,
              "col": 9,
              "offset": 381
            },
            "end": {
              "line": 17,
              "col": 16,
              "offset": 388
            },
            "abstract_content": "session"
          }
        },
        "message": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.",
        "metadata": {
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain",
          "shortlink": "https://sg.run/rd41",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9269,
              "rule_id": "ZqU5Pn",
              "rv_id": 945794,
              "url": "https://semgrep.dev/playground/r/e1T98Yy/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain",
              "version_id": "e1T98Yy"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "992ed8a575b21b5c7df47aa244abdc994c39e59606c5fc7627aa27ee44b4d32ac3c2bc52fc503c8891c5c85da7261233f6946a0c0f1164285d28400da783b65a_0",
        "lines": "app.use(session({\n  secret: 'super-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { maxAge: 60000 } // 1 minute for demo\n}));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 381
      },
      "end": {
        "line": 22,
        "col": 3,
        "offset": 517
      },
      "extra": {
        "metavars": {
          "$SESSION": {
            "start": {
              "line": 17,
              "col": 9,
              "offset": 381
            },
            "end": {
              "line": 17,
              "col": 16,
              "offset": 388
            },
            "abstract_content": "session"
          }
        },
        "message": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.",
        "metadata": {
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires",
          "shortlink": "https://sg.run/N4eG",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9271,
              "rule_id": "EwU2DZ",
              "rv_id": 945796,
              "url": "https://semgrep.dev/playground/r/d6TPjO8/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires",
              "version_id": "d6TPjO8"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "be4e6d35698105c57cd5b8ff889a692a7a22ca83a737e369eca3a4a58de6920924297ac2e59755e645440a1c7ea1660c9ecdca04d8ddd11e83408d124d2069be_0",
        "lines": "app.use(session({\n  secret: 'super-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { maxAge: 60000 } // 1 minute for demo\n}));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 381
      },
      "end": {
        "line": 22,
        "col": 3,
        "offset": 517
      },
      "extra": {
        "metavars": {
          "$SESSION": {
            "start": {
              "line": 17,
              "col": 9,
              "offset": 381
            },
            "end": {
              "line": 17,
              "col": 16,
              "offset": 388
            },
            "abstract_content": "session"
          }
        },
        "message": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.",
        "metadata": {
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly",
          "shortlink": "https://sg.run/ydBO",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9268,
              "rule_id": "d8UjGo",
              "rv_id": 945793,
              "url": "https://semgrep.dev/playground/r/O9TX3Ad/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly",
              "version_id": "O9TX3Ad"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "d8aae9d8b753ca5cbfbebb4d90cce95b8d6b1232eb4eade9675e816ee88a1428a573abeb06ca8f38c55759f500e7be356455f3c91113fb72789b21268ac12dec_0",
        "lines": "app.use(session({\n  secret: 'super-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { maxAge: 60000 } // 1 minute for demo\n}));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 381
      },
      "end": {
        "line": 22,
        "col": 3,
        "offset": 517
      },
      "extra": {
        "metavars": {
          "$SESSION": {
            "start": {
              "line": 17,
              "col": 9,
              "offset": 381
            },
            "end": {
              "line": 17,
              "col": 16,
              "offset": 388
            },
            "abstract_content": "session"
          }
        },
        "message": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.",
        "metadata": {
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path",
          "shortlink": "https://sg.run/b7pd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9270,
              "rule_id": "nJUz4X",
              "rv_id": 945795,
              "url": "https://semgrep.dev/playground/r/vdTGnKX/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path",
              "version_id": "vdTGnKX"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "c516bc32526f7bbb28a362a27fc93e34de39ed3e9d01a18cf96a3fded296e19c3364ead6239882779aa22d552b0d3193b6bd39f55c8d4bbb4dd2752b2fb306d2_0",
        "lines": "app.use(session({\n  secret: 'super-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { maxAge: 60000 } // 1 minute for demo\n}));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 381
      },
      "end": {
        "line": 22,
        "col": 3,
        "offset": 517
      },
      "extra": {
        "metavars": {
          "$SESSION": {
            "start": {
              "line": 17,
              "col": 9,
              "offset": 381
            },
            "end": {
              "line": 17,
              "col": 16,
              "offset": 388
            },
            "abstract_content": "session"
          }
        },
        "message": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.",
        "metadata": {
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "source-rule-url": "https://expressjs.com/en/advanced/best-practice-security.html",
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure",
          "shortlink": "https://sg.run/9oKz",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9267,
              "rule_id": "v8Unzw",
              "rv_id": 945792,
              "url": "https://semgrep.dev/playground/r/xyTqnlZ/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure",
              "version_id": "xyTqnlZ"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "f740b88ccbf5123052ee06e3a10768824e1b46dba05a490f5e09b0a7931be2e9bf1991108d19d68e44af36990013ec9bceaeeb7a5967151f2d1914334f0312f4_0",
        "lines": "app.use(session({\n  secret: 'super-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { maxAge: 60000 } // 1 minute for demo\n}));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret",
      "path": "temp_lang_folders/js/a7a400bd9c3cb22b96a04b5e3b77e14b11e1fdd8_server.js",
      "start": {
        "line": 18,
        "col": 3,
        "offset": 393
      },
      "end": {
        "line": 18,
        "col": 29,
        "offset": 419
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 17,
              "col": 1,
              "offset": 373
            },
            "end": {
              "line": 17,
              "col": 4,
              "offset": 376
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 6,
                "col": 13,
                "offset": 174
              },
              "svalue_end": {
                "line": 6,
                "col": 22,
                "offset": 183
              },
              "svalue_abstract_content": "express()"
            }
          },
          "$SESSION": {
            "start": {
              "line": 17,
              "col": 9,
              "offset": 381
            },
            "end": {
              "line": 17,
              "col": 16,
              "offset": 388
            },
            "abstract_content": "session"
          },
          "$Y": {
            "start": {
              "line": 18,
              "col": 12,
              "offset": 402
            },
            "end": {
              "line": 18,
              "col": 28,
              "offset": 418
            },
            "abstract_content": "super-secret-key"
          }
        },
        "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
        "metadata": {
          "interfile": true,
          "cwe": [
            "CWE-798: Use of Hard-coded Credentials"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
          ],
          "owasp": [
            "A07:2021 - Identification and Authentication Failures"
          ],
          "category": "security",
          "technology": [
            "express",
            "secrets"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "HIGH",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Hard-coded Secrets"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret",
          "shortlink": "https://sg.run/LYvG",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 22083,
              "rule_id": "10Uo39",
              "rv_id": 945804,
              "url": "https://semgrep.dev/playground/r/QkTZzR3/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret",
              "version_id": "QkTZzR3"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "141a24c0557444b4d1d39c5f653c982f58fe6c0420ee4a382fd0c0c05abbe1bc3877d23e557d244c5ad4dc18447b4a914e446ed5fa6753009ee6d2505a7db988_0",
        "lines": "  secret: 'super-secret-key',",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.mysql.node-mysql-hardcoded-secret.node-mysql-hardcoded-secret",
      "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
      "start": {
        "line": 7,
        "col": 35,
        "offset": 176
      },
      "end": {
        "line": 12,
        "col": 2,
        "offset": 332
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "mysql"
          },
          "$IMPORT": {
            "start": {
              "line": 3,
              "col": 24,
              "offset": 77
            },
            "end": {
              "line": 3,
              "col": 30,
              "offset": 83
            },
            "abstract_content": "mysql2"
          },
          "$MYSQL": {
            "start": {
              "line": 7,
              "col": 12,
              "offset": 153
            },
            "end": {
              "line": 7,
              "col": 17,
              "offset": 158
            },
            "abstract_content": "mysql"
          },
          "$FOO": {
            "start": {
              "line": 7,
              "col": 35,
              "offset": 176
            },
            "end": {
              "line": 12,
              "col": 2,
              "offset": 332
            },
            "abstract_content": "{host'localhost'user'root'password''database'patients_db'}"
          }
        },
        "message": "A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "interfile": true,
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-798: Use of Hard-coded Credentials"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "owasp": [
            "A07:2021 - Identification and Authentication Failures"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"
          ],
          "technology": [
            "mysql",
            "sql",
            "mysql2",
            "nodejs",
            "secrets"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Hard-coded Secrets"
          ],
          "source": "https://semgrep.dev/r/javascript.mysql.node-mysql-hardcoded-secret.node-mysql-hardcoded-secret",
          "shortlink": "https://sg.run/GJ36",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 28092,
              "rule_id": "6JU2k0",
              "rv_id": 947639,
              "url": "https://semgrep.dev/playground/r/6xTxqAx/javascript.mysql.node-mysql-hardcoded-secret.node-mysql-hardcoded-secret",
              "version_id": "6xTxqAx"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "d192446f94f8132d79722ecb594c6f81b64f2665e0b7a9175bd2ceca546235753433dabe8b0307367d25ef328a5084c075105c1dfff44acff3807bd60f1acf78_0",
        "lines": "const db = mysql.createConnection({\n    host: 'localhost',\n    user: 'root', // Change to your MySQL username\n    password: '', // Change to your MySQL password\n    database: 'patients_db'\n});",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
                "start": {
                  "line": 7,
                  "col": 35,
                  "offset": 176
                },
                "end": {
                  "line": 12,
                  "col": 2,
                  "offset": 332
                }
              },
              "{\n    host: 'localhost',\n    user: 'root', // Change to your MySQL username\n    password: '', // Change to your MySQL password\n    database: 'patients_db'\n}"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
                "start": {
                  "line": 7,
                  "col": 35,
                  "offset": 176
                },
                "end": {
                  "line": 12,
                  "col": 2,
                  "offset": 332
                }
              },
              "{\n    host: 'localhost',\n    user: 'root', // Change to your MySQL username\n    password: '', // Change to your MySQL password\n    database: 'patients_db'\n}"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
      "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
      "start": {
        "line": 29,
        "col": 16,
        "offset": 794
      },
      "end": {
        "line": 29,
        "col": 20,
        "offset": 798
      },
      "extra": {
        "metavars": {
          "$HTTP": {
            "start": {
              "line": 29,
              "col": 16,
              "offset": 794
            },
            "end": {
              "line": 29,
              "col": 20,
              "offset": 798
            },
            "abstract_content": "http",
            "propagated_value": {
              "svalue_start": {
                "line": 2,
                "col": 14,
                "offset": 37
              },
              "svalue_end": {
                "line": 2,
                "col": 29,
                "offset": 52
              },
              "svalue_abstract_content": "require('http')"
            }
          },
          "$FUNC": {
            "start": {
              "line": 29,
              "col": 21,
              "offset": 799
            },
            "end": {
              "line": 29,
              "col": 33,
              "offset": 811
            },
            "abstract_content": "createServer"
          }
        },
        "message": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "category": "security",
          "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
          "owasp": [
            "A02:2021 - Cryptographic Failures",
            "A03:2017 - Sensitive Data Exposure"
          ],
          "references": [
            "https://nodejs.org/api/http.html#http_class_http_agent",
            "https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY"
          ],
          "subcategory": [
            "audit"
          ],
          "technology": [
            "node.js"
          ],
          "vulnerability": "Insecure Transport",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Mishandled Sensitive Information"
          ],
          "source": "https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
          "shortlink": "https://sg.run/x1zL",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9430,
              "rule_id": "7KUQAE",
              "rv_id": 946074,
              "url": "https://semgrep.dev/playground/r/WrTEo9B/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
              "version_id": "WrTEo9B"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "ae952742e2999582e4c5760901ed413f3d7b42253cce481c32576686222fe46c3324427ba779b02389b55c75d8ba0cde449b45e399f9a02d4e79ee1487955e2e_0",
        "lines": "const server = http.createServer((req, res) => {",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.sqli.node-mysql-sqli.node-mysql-sqli",
      "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
      "start": {
        "line": 50,
        "col": 18,
        "offset": 1900
      },
      "end": {
        "line": 50,
        "col": 21,
        "offset": 1903
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "mysql"
          },
          "$IMPORT": {
            "start": {
              "line": 3,
              "col": 24,
              "offset": 77
            },
            "end": {
              "line": 3,
              "col": 30,
              "offset": 83
            },
            "abstract_content": "mysql2"
          },
          "$Y": {
            "start": {
              "line": 30,
              "col": 33,
              "offset": 860
            },
            "end": {
              "line": 30,
              "col": 36,
              "offset": 863
            },
            "abstract_content": "req"
          },
          "$POOL": {
            "start": {
              "line": 50,
              "col": 9,
              "offset": 1891
            },
            "end": {
              "line": 50,
              "col": 11,
              "offset": 1893
            },
            "abstract_content": "db",
            "propagated_value": {
              "svalue_start": {
                "line": 7,
                "col": 12,
                "offset": 153
              },
              "svalue_end": {
                "line": 12,
                "col": 3,
                "offset": 333
              },
              "svalue_abstract_content": "mysql.createConnection({host'localhost'user'root'password''database'patients_db'})"
            }
          },
          "$QUERY": {
            "start": {
              "line": 50,
              "col": 18,
              "offset": 1900
            },
            "end": {
              "line": 50,
              "col": 21,
              "offset": 1903
            },
            "abstract_content": "sql",
            "propagated_value": {
              "svalue_start": {
                "line": 45,
                "col": 21,
                "offset": 1614
              },
              "svalue_end": {
                "line": 45,
                "col": 40,
                "offset": 1633
              },
              "svalue_abstract_content": "parsedUrl.query.sql"
            }
          }
        },
        "message": "Detected a `mysql2` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "metadata": {
          "references": [
            "https://www.npmjs.com/package/mysql2",
            "https://www.npmjs.com/package/mysql",
            "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
          ],
          "category": "security",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "confidence": "LOW",
          "technology": [
            "mysql",
            "mysql2",
            "javascript",
            "nodejs"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.sqli.node-mysql-sqli.node-mysql-sqli",
          "shortlink": "https://sg.run/Y0oy",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 18258,
              "rule_id": "ZqUlWE",
              "rv_id": 945881,
              "url": "https://semgrep.dev/playground/r/pZTNOvL/javascript.lang.security.audit.sqli.node-mysql-sqli.node-mysql-sqli",
              "version_id": "pZTNOvL"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "fd3cf3bd2f999d76ef7c7d945e0a39a68c55927f98bc3fddbef989b06fec50b1bf88648c7f14bc46b29b50b50277fbd8f608672650f0c5651fa8a03409878eea_0",
        "lines": "        db.query(sql, (err, result) => {",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
                "start": {
                  "line": 30,
                  "col": 33,
                  "offset": 860
                },
                "end": {
                  "line": 30,
                  "col": 36,
                  "offset": 863
                }
              },
              "req"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
                "start": {
                  "line": 30,
                  "col": 11,
                  "offset": 838
                },
                "end": {
                  "line": 30,
                  "col": 20,
                  "offset": 847
                }
              },
              "content": "parsedUrl"
            },
            {
              "location": {
                "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
                "start": {
                  "line": 45,
                  "col": 15,
                  "offset": 1608
                },
                "end": {
                  "line": 45,
                  "col": 18,
                  "offset": 1611
                }
              },
              "content": "sql"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/a8abcf9bdb4c5b82e385e0a401447e7a74924f7c_user.js",
                "start": {
                  "line": 50,
                  "col": 18,
                  "offset": 1900
                },
                "end": {
                  "line": 50,
                  "col": 21,
                  "offset": 1903
                }
              },
              "sql"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
      "path": "temp_lang_folders/js/d83ee4c7ecf02fcdcd0360776dcb661982aad542_comments.js",
      "start": {
        "line": 5,
        "col": 7,
        "offset": 84
      },
      "end": {
        "line": 5,
        "col": 22,
        "offset": 99
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 5,
              "col": 7,
              "offset": 84
            },
            "end": {
              "line": 5,
              "col": 10,
              "offset": 87
            },
            "abstract_content": "app"
          },
          "$EXPRESS": {
            "start": {
              "line": 5,
              "col": 13,
              "offset": 90
            },
            "end": {
              "line": 5,
              "col": 20,
              "offset": 97
            },
            "abstract_content": "express"
          }
        },
        "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
        "metadata": {
          "category": "security",
          "references": [
            "https://www.npmjs.com/package/csurf",
            "https://www.npmjs.com/package/csrf",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
          ],
          "cwe": [
            "CWE-352: Cross-Site Request Forgery (CSRF)"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "technology": [
            "javascript",
            "typescript",
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site Request Forgery (CSRF)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
          "shortlink": "https://sg.run/BxzR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 22551,
              "rule_id": "wdUKEq",
              "rv_id": 945789,
              "url": "https://semgrep.dev/playground/r/NdTqkvB/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "version_id": "NdTqkvB"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "23a343dddc0d5fa5a600f9fe2a836ba1545d905298451318c29a4da9e0795ee76865323fc0499c53ef4839ddd23ee87aee44f9ff4c2b00b62d90801ca7868e80_0",
        "lines": "const app = express();",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "temp_lang_folders/js/dee3bb63b4a5032b30620ac6196cc0c6d7ab46c0_create_data.js",
      "start": {
        "line": 344,
        "col": 21,
        "offset": 8370
      },
      "end": {
        "line": 344,
        "col": 63,
        "offset": 8412
      },
      "extra": {
        "metavars": {
          "$X": {
            "start": {
              "line": 328,
              "col": 37,
              "offset": 7939
            },
            "end": {
              "line": 328,
              "col": 38,
              "offset": 7940
            },
            "abstract_content": "i"
          },
          "$Y": {
            "start": {
              "line": 328,
              "col": 42,
              "offset": 7944
            },
            "end": {
              "line": 328,
              "col": 51,
              "offset": 7953
            },
            "abstract_content": "batchSize",
            "propagated_value": {
              "svalue_start": {
                "line": 326,
                "col": 21,
                "offset": 7896
              },
              "svalue_end": {
                "line": 326,
                "col": 23,
                "offset": 7898
              },
              "svalue_abstract_content": "25"
            }
          },
          "$LOG": {
            "start": {
              "line": 344,
              "col": 15,
              "offset": 8364
            },
            "end": {
              "line": 344,
              "col": 20,
              "offset": 8369
            },
            "abstract_content": "error"
          },
          "$STR": {
            "start": {
              "line": 344,
              "col": 21,
              "offset": 8370
            },
            "end": {
              "line": 344,
              "col": 63,
              "offset": 8412
            },
            "abstract_content": "`Error writing batch i/batchSize+1:"
          },
          "$PARAM": {
            "start": {
              "line": 344,
              "col": 66,
              "offset": 8415
            },
            "end": {
              "line": 344,
              "col": 71,
              "offset": 8420
            },
            "abstract_content": "error"
          }
        },
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13582,
              "rule_id": "ReU3OJ",
              "rv_id": 945885,
              "url": "https://semgrep.dev/playground/r/1QToKA3/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
              "version_id": "1QToKA3"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "8973eb66c43b7150df14181e88d8927ac0029a3ea24ff3fb0365a626e005f4f7df5ab23f27c78a869a8e4a242e8664e828d09fc2e45ab8eeb1026823cbb6b665_0",
        "lines": "      console.error(`Error writing batch ${i / batchSize + 1}:`, error);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/dee3bb63b4a5032b30620ac6196cc0c6d7ab46c0_create_data.js",
                "start": {
                  "line": 328,
                  "col": 37,
                  "offset": 7939
                },
                "end": {
                  "line": 328,
                  "col": 51,
                  "offset": 7953
                }
              },
              "i += batchSize"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/js/dee3bb63b4a5032b30620ac6196cc0c6d7ab46c0_create_data.js",
                "start": {
                  "line": 328,
                  "col": 37,
                  "offset": 7939
                },
                "end": {
                  "line": 328,
                  "col": 38,
                  "offset": 7940
                }
              },
              "content": "i"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/js/dee3bb63b4a5032b30620ac6196cc0c6d7ab46c0_create_data.js",
                "start": {
                  "line": 344,
                  "col": 21,
                  "offset": 8370
                },
                "end": {
                  "line": 344,
                  "col": 63,
                  "offset": 8412
                }
              },
              "`Error writing batch ${i / batchSize + 1}:"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.browser.security.insecure-document-method.insecure-document-method",
      "path": "temp_lang_folders/js/ed32f763ee6552a697378249363ae74a2c58f6cd_main.js",
      "start": {
        "line": 74,
        "col": 13,
        "offset": 2597
      },
      "end": {
        "line": 74,
        "col": 145,
        "offset": 2729
      },
      "extra": {
        "metavars": {
          "$EL": {
            "start": {
              "line": 74,
              "col": 13,
              "offset": 2597
            },
            "end": {
              "line": 74,
              "col": 23,
              "offset": 2607
            },
            "abstract_content": "promptLine"
          },
          "$HTML": {
            "start": {
              "line": 74,
              "col": 36,
              "offset": 2620
            },
            "end": {
              "line": 74,
              "col": 144,
              "offset": 2728
            },
            "abstract_content": "`<span class=\"prompt\">root@server:~$</span> +command.substring(0 i+1)+'<span class=\"cursor\"></span>'"
          }
        },
        "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "browser"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method",
          "shortlink": "https://sg.run/LwA9",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9239,
              "rule_id": "ReUg41",
              "rv_id": 945779,
              "url": "https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method",
              "version_id": "zyTlk9P"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "87076381edf909b8972a4d2d2685eeed59e97280cd2fcca3f8c3661f833599f3388de89d9363709d0848940ea22606580d857d948143f1c4ea9238a9c2fbb3f5_0",
        "lines": "            promptLine.innerHTML = `<span class=\"prompt\">root@server:~$</span> ` + command.substring(0, i + 1) + '<span class=\"cursor\"></span>';",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.browser.security.insecure-document-method.insecure-document-method",
      "path": "temp_lang_folders/js/ed32f763ee6552a697378249363ae74a2c58f6cd_main.js",
      "start": {
        "line": 78,
        "col": 13,
        "offset": 2810
      },
      "end": {
        "line": 78,
        "col": 92,
        "offset": 2889
      },
      "extra": {
        "metavars": {
          "$EL": {
            "start": {
              "line": 78,
              "col": 13,
              "offset": 2810
            },
            "end": {
              "line": 78,
              "col": 23,
              "offset": 2820
            },
            "abstract_content": "promptLine"
          },
          "$HTML": {
            "start": {
              "line": 78,
              "col": 36,
              "offset": 2833
            },
            "end": {
              "line": 78,
              "col": 91,
              "offset": 2888
            },
            "abstract_content": "`<span class=\"prompt\">root@server:~$</span> +command"
          }
        },
        "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "browser"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method",
          "shortlink": "https://sg.run/LwA9",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9239,
              "rule_id": "ReUg41",
              "rv_id": 945779,
              "url": "https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method",
              "version_id": "zyTlk9P"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "267ab5c6a371f89b5dd0af355c68bf855685c6b52033214db02a7d1a78eb9d37d1cbf99e7b7ea1c6afc57576047f20b84be78e2bf258e4a03d3920a62b3bf03b_0",
        "lines": "            promptLine.innerHTML = `<span class=\"prompt\">root@server:~$</span> ` + command;",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.browser.security.insecure-document-method.insecure-document-method",
      "path": "temp_lang_folders/js/ed32f763ee6552a697378249363ae74a2c58f6cd_main.js",
      "start": {
        "line": 92,
        "col": 13,
        "offset": 3233
      },
      "end": {
        "line": 92,
        "col": 41,
        "offset": 3261
      },
      "extra": {
        "metavars": {
          "$EL": {
            "start": {
              "line": 92,
              "col": 13,
              "offset": 3233
            },
            "end": {
              "line": 92,
              "col": 23,
              "offset": 3243
            },
            "abstract_content": "outputLine"
          },
          "$HTML": {
            "start": {
              "line": 92,
              "col": 36,
              "offset": 3256
            },
            "end": {
              "line": 92,
              "col": 40,
              "offset": 3260
            },
            "abstract_content": "line"
          }
        },
        "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "browser"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method",
          "shortlink": "https://sg.run/LwA9",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9239,
              "rule_id": "ReUg41",
              "rv_id": 945779,
              "url": "https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method",
              "version_id": "zyTlk9P"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "a375b5136dac1af978b457f106bbebeba6bc8ad348d237652754ad52ef98464bb9c25738e10953725ebe02c1b4bb5d4279b1b4464e57056a3e639ad806dbb352_0",
        "lines": "            outputLine.innerHTML = line;",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.browser.security.insecure-document-method.insecure-document-method",
      "path": "temp_lang_folders/js/ee23d26fb63239989d05977278db7b36bcf84a9d_game.js",
      "start": {
        "line": 67,
        "col": 9,
        "offset": 1983
      },
      "end": {
        "line": 67,
        "col": 115,
        "offset": 2089
      },
      "extra": {
        "metavars": {
          "$EL": {
            "start": {
              "line": 67,
              "col": 9,
              "offset": 1983
            },
            "end": {
              "line": 67,
              "col": 48,
              "offset": 2022
            },
            "abstract_content": "document.getElementById('guessedWords')"
          },
          "$HTML": {
            "start": {
              "line": 67,
              "col": 61,
              "offset": 2035
            },
            "end": {
              "line": 67,
              "col": 112,
              "offset": 2086
            },
            "abstract_content": "`Guessed Words:<br>this.guessedWords.join('<br>')"
          }
        },
        "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "browser"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method",
          "shortlink": "https://sg.run/LwA9",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9239,
              "rule_id": "ReUg41",
              "rv_id": 945779,
              "url": "https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method",
              "version_id": "zyTlk9P"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "d97c4cd5e393350299323ba7df2628e02cc5af2204b743126cac8896005f5b6000047efc6e356759852452c4a4686aa7877f7c2f89a5eb26af866b6635d71b72_0",
        "lines": "        document.getElementById('guessedWords').innerHTML = `Guessed Words:<br>${this.guessedWords.join('<br>')}`;",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "java.lang.security.audit.crypto.weak-random.weak-random",
      "path": "temp_lang_folders/java/353e63d6df5a93cd51c66808f62f68349c3b85c0_Pipe.java",
      "start": {
        "line": 45,
        "col": 49,
        "offset": 1207
      },
      "end": {
        "line": 45,
        "col": 81,
        "offset": 1239
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 45,
              "col": 62,
              "offset": 1220
            },
            "end": {
              "line": 45,
              "col": 69,
              "offset": 1227
            },
            "abstract_content": "nextInt"
          }
        },
        "message": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.",
        "metadata": {
          "functional-categories": [
            "crypto::search::randomness::java.security"
          ],
          "owasp": [
            "A02:2021 - Cryptographic Failures"
          ],
          "cwe": [
            "CWE-330: Use of Insufficiently Random Values"
          ],
          "category": "security",
          "technology": [
            "java"
          ],
          "references": [
            "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/java.lang.security.audit.crypto.weak-random.weak-random",
          "shortlink": "https://sg.run/NwBp",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 17327,
              "rule_id": "lBUW5D",
              "rv_id": 945675,
              "url": "https://semgrep.dev/playground/r/YDTvR81/java.lang.security.audit.crypto.weak-random.weak-random",
              "version_id": "YDTvR81"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "c555f138e46d779d2432570843adf119e6e671bb3f976ceb43b463cfd01e5cb6d9c2199890377405e05cfad302753a21667aeda213584c65f6e0b2c803913e98_0",
        "lines": "            pipes.add(new Pipe(WIDTH + i * 300, new Random().nextInt(HEIGHT / 2) + HEIGHT / 4));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
      "path": "temp_lang_folders/java/a03dd95856e5f3cb40e35f26e68f8a034d83f87b_ZeroConfService.java",
      "start": {
        "line": 39,
        "col": 28,
        "offset": 1004
      },
      "end": {
        "line": 39,
        "col": 50,
        "offset": 1026
      },
      "extra": {
        "metavars": {},
        "message": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.",
        "metadata": {
          "functional-categories": [
            "net::search::crypto-config::java.net"
          ],
          "cwe": [
            "CWE-319: Cleartext Transmission of Sensitive Information"
          ],
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET",
          "asvs": {
            "control_id": "6.2.5 Insecure Algorithm",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
            "section": "V6 Stored Cryptography Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "technology": [
            "java"
          ],
          "references": [
            "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Mishandled Sensitive Information"
          ],
          "source": "https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
          "shortlink": "https://sg.run/W8zA",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9197,
              "rule_id": "BYUN3X",
              "rv_id": 945666,
              "url": "https://semgrep.dev/playground/r/RGTAgw9/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
              "version_id": "RGTAgw9"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "56e0f7faf33af736f4be3fcec125e0bf0d55bf6787a19d082a4ee51f34e446fd42362639984f533aaffbf30c052377898aa53d00f4457726f6cba9aa207a4945_0",
        "lines": "            serverSocket = new ServerSocket(8274);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
      "path": "temp_lang_folders/java/a03dd95856e5f3cb40e35f26e68f8a034d83f87b_ZeroConfService.java",
      "start": {
        "line": 254,
        "col": 17,
        "offset": 10386
      },
      "end": {
        "line": 254,
        "col": 36,
        "offset": 10405
      },
      "extra": {
        "metavars": {
          "$EXCEPTION": {
            "start": {
              "line": 254,
              "col": 17,
              "offset": 10386
            },
            "end": {
              "line": 254,
              "col": 18,
              "offset": 10387
            },
            "abstract_content": "e"
          }
        },
        "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "audit"
          ],
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "functional-categories": [
            "debug::search::active-debug-code::java.lang"
          ],
          "owasp": [
            "A10:2004 - Insecure Configuration Management",
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "references": [
            "https://cwe.mitre.org/data/definitions/489.html",
            "https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
            "https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure"
          ],
          "technology": [
            "java"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
          "shortlink": "https://sg.run/4K8z",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27144,
              "rule_id": "v8U0rZ",
              "rv_id": 947426,
              "url": "https://semgrep.dev/playground/r/GxTP0lB/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
              "version_id": "GxTP0lB"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "8f7ca1d7d1ec12779d24e2308c85e8c82a19b71fa22a3c911a7b9e764fd5eda97325f87d84375b15960da94044256d0a5d530192675c24c3c43cc1caf638cf3d_0",
        "lines": "                e.printStackTrace();",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "temp_lang_folders/ts/3ba6f21fef3b66850d488caa80b5a7b5e853d563_test-vector-search.ts",
      "start": {
        "line": 105,
        "col": 21,
        "offset": 4186
      },
      "end": {
        "line": 105,
        "col": 59,
        "offset": 4224
      },
      "extra": {
        "metavars": {
          "$LOG": {
            "start": {
              "line": 105,
              "col": 15,
              "offset": 4180
            },
            "end": {
              "line": 105,
              "col": 20,
              "offset": 4185
            },
            "abstract_content": "error"
          },
          "$STR": {
            "start": {
              "line": 105,
              "col": 21,
              "offset": 4186
            },
            "end": {
              "line": 105,
              "col": 59,
              "offset": 4224
            },
            "abstract_content": "`Error searching for query \"query\":"
          },
          "$PARAM": {
            "start": {
              "line": 105,
              "col": 62,
              "offset": 4227
            },
            "end": {
              "line": 105,
              "col": 67,
              "offset": 4232
            },
            "abstract_content": "error"
          }
        },
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13582,
              "rule_id": "ReU3OJ",
              "rv_id": 945885,
              "url": "https://semgrep.dev/playground/r/1QToKA3/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
              "version_id": "1QToKA3"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "77648f586d89db5d32262f36df4f37523bb6e6174363c064d824dafc0fd4358510ed6dcf94d8f08d0fa769f14c9e6287c490d9be01bb1efa2cc89269a265495a_0",
        "lines": "      console.error(`Error searching for query \"${query}\":`, error);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/3ba6f21fef3b66850d488caa80b5a7b5e853d563_test-vector-search.ts",
                "start": {
                  "line": 105,
                  "col": 21,
                  "offset": 4186
                },
                "end": {
                  "line": 105,
                  "col": 59,
                  "offset": 4224
                }
              },
              "`Error searching for query \"${query}\":"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/3ba6f21fef3b66850d488caa80b5a7b5e853d563_test-vector-search.ts",
                "start": {
                  "line": 105,
                  "col": 21,
                  "offset": 4186
                },
                "end": {
                  "line": 105,
                  "col": 59,
                  "offset": 4224
                }
              },
              "`Error searching for query \"${query}\":"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "temp_lang_folders/ts/3ba6f21fef3b66850d488caa80b5a7b5e853d563_test-vector-search.ts",
      "start": {
        "line": 156,
        "col": 21,
        "offset": 6172
      },
      "end": {
        "line": 156,
        "col": 68,
        "offset": 6219
      },
      "extra": {
        "metavars": {
          "$LOG": {
            "start": {
              "line": 156,
              "col": 15,
              "offset": 6166
            },
            "end": {
              "line": 156,
              "col": 20,
              "offset": 6171
            },
            "abstract_content": "error"
          },
          "$STR": {
            "start": {
              "line": 156,
              "col": 21,
              "offset": 6172
            },
            "end": {
              "line": 156,
              "col": 68,
              "offset": 6219
            },
            "abstract_content": "`Error searching for enhanced query \"query\":"
          },
          "$PARAM": {
            "start": {
              "line": 156,
              "col": 71,
              "offset": 6222
            },
            "end": {
              "line": 156,
              "col": 76,
              "offset": 6227
            },
            "abstract_content": "error"
          }
        },
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13582,
              "rule_id": "ReU3OJ",
              "rv_id": 945885,
              "url": "https://semgrep.dev/playground/r/1QToKA3/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
              "version_id": "1QToKA3"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "74fa8dbe938b13deb406d3a11367988c0bf3c58110a0f1995496c35ae825e1441e6e0b3ae771033fc7f9ed96fbce7563d2b88bdf0d4a0ec5c59286ac8fb63c2f_0",
        "lines": "      console.error(`Error searching for enhanced query \"${query}\":`, error);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/3ba6f21fef3b66850d488caa80b5a7b5e853d563_test-vector-search.ts",
                "start": {
                  "line": 156,
                  "col": 21,
                  "offset": 6172
                },
                "end": {
                  "line": 156,
                  "col": 68,
                  "offset": 6219
                }
              },
              "`Error searching for enhanced query \"${query}\":"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/3ba6f21fef3b66850d488caa80b5a7b5e853d563_test-vector-search.ts",
                "start": {
                  "line": 156,
                  "col": 21,
                  "offset": 6172
                },
                "end": {
                  "line": 156,
                  "col": 68,
                  "offset": 6219
                }
              },
              "`Error searching for enhanced query \"${query}\":"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "temp_lang_folders/ts/9ee37827dd7c6668a88a684d67ea5629198053bc_issue.ts",
      "start": {
        "line": 63,
        "col": 27,
        "offset": 1760
      },
      "end": {
        "line": 63,
        "col": 82,
        "offset": 1815
      },
      "extra": {
        "metavars": {
          "$LOG": {
            "start": {
              "line": 63,
              "col": 21,
              "offset": 1754
            },
            "end": {
              "line": 63,
              "col": 26,
              "offset": 1759
            },
            "abstract_content": "error"
          },
          "$STR": {
            "start": {
              "line": 63,
              "col": 27,
              "offset": 1760
            },
            "end": {
              "line": 63,
              "col": 82,
              "offset": 1815
            },
            "abstract_content": "`Failed to delete issue #issue.number: issue.title"
          },
          "$PARAM": {
            "start": {
              "line": 63,
              "col": 86,
              "offset": 1819
            },
            "end": {
              "line": 63,
              "col": 99,
              "offset": 1832
            },
            "abstract_content": "error.message"
          }
        },
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13582,
              "rule_id": "ReU3OJ",
              "rv_id": 945885,
              "url": "https://semgrep.dev/playground/r/1QToKA3/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
              "version_id": "1QToKA3"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "7f9635c6a6d0a9d6220ab5c442e29c5e7d7a7e1e17e5f918e1831b5a51082b5aa162a4aec389727ade49c7ed8ab4bfdb40ff67383c2d2da45d2548d5492a0889_0",
        "lines": "            console.error(`Failed to delete issue #${issue.number}: ${issue.title}`, error.message);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/9ee37827dd7c6668a88a684d67ea5629198053bc_issue.ts",
                "start": {
                  "line": 63,
                  "col": 27,
                  "offset": 1760
                },
                "end": {
                  "line": 63,
                  "col": 82,
                  "offset": 1815
                }
              },
              "`Failed to delete issue #${issue.number}: ${issue.title"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/9ee37827dd7c6668a88a684d67ea5629198053bc_issue.ts",
                "start": {
                  "line": 63,
                  "col": 27,
                  "offset": 1760
                },
                "end": {
                  "line": 63,
                  "col": 82,
                  "offset": 1815
                }
              },
              "`Failed to delete issue #${issue.number}: ${issue.title"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization",
      "path": "temp_lang_folders/ts/a3446c12003afda48b27570699dae3ced36c9435_day8.ts",
      "start": {
        "line": 13,
        "col": 61,
        "offset": 413
      },
      "end": {
        "line": 13,
        "col": 83,
        "offset": 435
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 2,
              "offset": 1
            },
            "end": {
              "line": 1,
              "col": 4,
              "offset": 3
            },
            "abstract_content": "\\r"
          },
          "$STR": {
            "start": {
              "line": 13,
              "col": 61,
              "offset": 413
            },
            "end": {
              "line": 13,
              "col": 65,
              "offset": 417
            },
            "abstract_content": "line"
          },
          "$CHAR": {
            "start": {
              "line": 13,
              "col": 74,
              "offset": 426
            },
            "end": {
              "line": 13,
              "col": 78,
              "offset": 430
            },
            "abstract_content": "\"\\r\""
          }
        },
        "message": "`line.replace` method will only replace the first occurrence when used with a string argument (\"\\r\"). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.",
        "metadata": {
          "cwe": [
            "CWE-116: Improper Encoding or Escaping of Output"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Encoding"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization",
          "shortlink": "https://sg.run/1GbQ",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13466,
              "rule_id": "d8UlRq",
              "rv_id": 945873,
              "url": "https://semgrep.dev/playground/r/0bT15RE/javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization",
              "version_id": "0bT15RE"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "dc4a68e7bc9f009da15998151fbf325d44ca5e29dde5d412d374a70d2e6a38438141d4ecfd66e901d8785b564cfaef2fe876e89c06bd854ee87248edc91fd6a6_0",
        "lines": "        this.inputMap = this.data.split(\"\\n\").map((line) => line.replace(\"\\r\", \"\").split(\" \"));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
      "start": {
        "line": 26,
        "col": 35,
        "offset": 1468
      },
      "end": {
        "line": 26,
        "col": 44,
        "offset": 1477
      },
      "extra": {
        "metavars": {
          "$X": {
            "start": {
              "line": 22,
              "col": 30,
              "offset": 1308
            },
            "end": {
              "line": 22,
              "col": 39,
              "offset": 1317
            },
            "abstract_content": "directory"
          },
          "$SINK": {
            "start": {
              "line": 26,
              "col": 35,
              "offset": 1468
            },
            "end": {
              "line": 26,
              "col": 44,
              "offset": 1477
            },
            "abstract_content": "directory"
          }
        },
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9331,
              "rule_id": "8GUjrq",
              "rv_id": 945875,
              "url": "https://semgrep.dev/playground/r/qkT4jzX/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
              "version_id": "qkT4jzX"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "1d500ae68488ddc5e9dd4638c786689522766b3ef3991d4379baeb0388c496771e6668fbd6588b581dec47cafa57dfd1ef13adf7d7d8ef8e0ced0766def9b71c_0",
        "lines": "      const entryPath = path.join(directory, entry);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 22,
                  "col": 30,
                  "offset": 1308
                },
                "end": {
                  "line": 22,
                  "col": 39,
                  "offset": 1317
                }
              },
              "directory"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 22,
                  "col": 30,
                  "offset": 1308
                },
                "end": {
                  "line": 22,
                  "col": 39,
                  "offset": 1317
                }
              },
              "content": "directory"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 26,
                  "col": 35,
                  "offset": 1468
                },
                "end": {
                  "line": 26,
                  "col": 44,
                  "offset": 1477
                }
              },
              "directory"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
      "start": {
        "line": 26,
        "col": 46,
        "offset": 1479
      },
      "end": {
        "line": 26,
        "col": 51,
        "offset": 1484
      },
      "extra": {
        "metavars": {
          "$X": {
            "start": {
              "line": 22,
              "col": 30,
              "offset": 1308
            },
            "end": {
              "line": 22,
              "col": 39,
              "offset": 1317
            },
            "abstract_content": "directory"
          },
          "$SINK": {
            "start": {
              "line": 26,
              "col": 46,
              "offset": 1479
            },
            "end": {
              "line": 26,
              "col": 51,
              "offset": 1484
            },
            "abstract_content": "entry"
          }
        },
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9331,
              "rule_id": "8GUjrq",
              "rv_id": 945875,
              "url": "https://semgrep.dev/playground/r/qkT4jzX/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
              "version_id": "qkT4jzX"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "71b14ff1de470d9f065f6e1c748cf953d856f45329a31b9108843f882fa58707b06ca8bb13a3e9acf879555c2e2e26987d717cfd4e36d344d5e12c866702ddd5_0",
        "lines": "      const entryPath = path.join(directory, entry);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 22,
                  "col": 30,
                  "offset": 1308
                },
                "end": {
                  "line": 22,
                  "col": 39,
                  "offset": 1317
                }
              },
              "directory"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 22,
                  "col": 30,
                  "offset": 1308
                },
                "end": {
                  "line": 22,
                  "col": 39,
                  "offset": 1317
                }
              },
              "content": "directory"
            },
            {
              "location": {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 23,
                  "col": 11,
                  "offset": 1361
                },
                "end": {
                  "line": 23,
                  "col": 18,
                  "offset": 1368
                }
              },
              "content": "entries"
            },
            {
              "location": {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 25,
                  "col": 16,
                  "offset": 1414
                },
                "end": {
                  "line": 25,
                  "col": 21,
                  "offset": 1419
                }
              },
              "content": "entry"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/ts/bc880d810fbc0e49cdf0456243d6d5b11dee7a66_readme-gen.ts",
                "start": {
                  "line": 26,
                  "col": 46,
                  "offset": 1479
                },
                "end": {
                  "line": 26,
                  "col": 51,
                  "offset": 1484
                }
              },
              "entry"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.net.use-tls.use-tls",
      "path": "temp_lang_folders/go/3c52bb3d12ebab6fb55e07e454d29c758887f860_repository.go",
      "start": {
        "line": 19,
        "col": 12,
        "offset": 322
      },
      "end": {
        "line": 19,
        "col": 42,
        "offset": 352
      },
      "extra": {
        "metavars": {
          "$ADDR": {
            "start": {
              "line": 19,
              "col": 32,
              "offset": 342
            },
            "end": {
              "line": 19,
              "col": 36,
              "offset": 346
            },
            "abstract_content": "port"
          },
          "$HANDLER": {
            "start": {
              "line": 19,
              "col": 38,
              "offset": 348
            },
            "end": {
              "line": 19,
              "col": 41,
              "offset": 351
            },
            "abstract_content": "s.r"
          }
        },
        "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.",
        "fix": "http.ListenAndServeTLS(port, certFile, keyFile, s.r)",
        "metadata": {
          "cwe": [
            "CWE-319: Cleartext Transmission of Sensitive Information"
          ],
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://golang.org/pkg/net/http/#ListenAndServeTLS"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "MEDIUM",
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Mishandled Sensitive Information"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls",
          "shortlink": "https://sg.run/dKbY",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9134,
              "rule_id": "PeUZ8X",
              "rv_id": 945587,
              "url": "https://semgrep.dev/playground/r/NdTqkJK/go.lang.security.audit.net.use-tls.use-tls",
              "version_id": "NdTqkJK"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "b0f0f9207f49504605abb012421e408770c259aa95e47dd7f115c864d33ce5511dca659743ccc0f9667b409f8c8b8ffb258b865a88a1e554e955ea86808fb03a_0",
        "lines": "\tlog.Fatal(http.ListenAndServe(port, s.r))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.crypto.math_random.math-random-used",
      "path": "temp_lang_folders/go/d59640921f7afa02c2c4abb4fc212962c0d4f108_notificationserver.go",
      "start": {
        "line": 9,
        "col": 3,
        "offset": 122
      },
      "end": {
        "line": 9,
        "col": 12,
        "offset": 131
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 10,
              "offset": 9
            },
            "abstract_content": "math/rand"
          },
          "$MATH": {
            "start": {
              "line": 9,
              "col": 3,
              "offset": 122
            },
            "end": {
              "line": 9,
              "col": 12,
              "offset": 131
            },
            "abstract_content": "math/rand"
          },
          "$RAND": {
            "start": {
              "line": 25,
              "col": 10,
              "offset": 428
            },
            "end": {
              "line": 25,
              "col": 13,
              "offset": 431
            },
            "abstract_content": "fmt"
          },
          "$FUNC": {
            "start": {
              "line": 25,
              "col": 14,
              "offset": 432
            },
            "end": {
              "line": 25,
              "col": 20,
              "offset": 438
            },
            "abstract_content": "Errorf"
          }
        },
        "message": "Do not use `math/rand`. Use `crypto/rand` instead.",
        "fix": "crypto/rand",
        "metadata": {
          "cwe": [
            "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
          ],
          "owasp": [
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "MEDIUM",
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used",
          "shortlink": "https://sg.run/6nK6",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9115,
              "rule_id": "bwUwy8",
              "rv_id": 945562,
              "url": "https://semgrep.dev/playground/r/JdTDyK5/go.lang.security.audit.crypto.math_random.math-random-used",
              "version_id": "JdTDyK5"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "3600126c7d5cbe3ba7a7c4751d15a268a146c260e5169ac6179db12d78d49b407e5d150a69c91169f1de4ec1b733bb1e5a490c8e091a6f84a46c2af88df41596_0",
        "lines": "\t\"math/rand\"",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "csharp.lang.security.sqli.csharp-sqli.csharp-sqli",
      "path": "temp_lang_folders/cs/f3588323668fef37276b6990d4325b037becc09b_DBFacade.cs",
      "start": {
        "line": 9,
        "col": 35,
        "offset": 358
      },
      "end": {
        "line": 9,
        "col": 40,
        "offset": 363
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 12,
              "offset": 11
            },
            "abstract_content": "CommandText"
          },
          "$CMD": {
            "start": {
              "line": 9,
              "col": 13,
              "offset": 336
            },
            "end": {
              "line": 9,
              "col": 20,
              "offset": 343
            },
            "abstract_content": "command",
            "propagated_value": {
              "svalue_start": {
                "line": 8,
                "col": 27,
                "offset": 296
              },
              "svalue_end": {
                "line": 8,
                "col": 53,
                "offset": 322
              },
              "svalue_abstract_content": "connection.CreateCommand()"
            }
          },
          "$PATTERN": {
            "start": {
              "line": 9,
              "col": 21,
              "offset": 344
            },
            "end": {
              "line": 9,
              "col": 32,
              "offset": 355
            },
            "abstract_content": "CommandText"
          },
          "$VALUE": {
            "start": {
              "line": 9,
              "col": 35,
              "offset": 358
            },
            "end": {
              "line": 9,
              "col": 40,
              "offset": 363
            },
            "abstract_content": "query"
          },
          "$X": {
            "start": {
              "line": 9,
              "col": 35,
              "offset": 358
            },
            "end": {
              "line": 9,
              "col": 40,
              "offset": 363
            },
            "abstract_content": "query"
          }
        },
        "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.",
        "metadata": {
          "category": "security",
          "technology": [
            "csharp"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli",
          "shortlink": "https://sg.run/d2Xd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 15078,
              "rule_id": "x8UxeP",
              "rv_id": 945226,
              "url": "https://semgrep.dev/playground/r/bZTXwLl/csharp.lang.security.sqli.csharp-sqli.csharp-sqli",
              "version_id": "bZTXwLl"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "3dd0f3120b3a9474351a091bdaac70d6b9fb8d1e775964db26ae4afd2d4147ed63a84920bf86b5677579bd7e18115b28f4942a184f59d48e133ac9f8afcbbe22_0",
        "lines": "            command.CommandText = query;",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/cs/f3588323668fef37276b6990d4325b037becc09b_DBFacade.cs",
                "start": {
                  "line": 9,
                  "col": 35,
                  "offset": 358
                },
                "end": {
                  "line": 9,
                  "col": 40,
                  "offset": 363
                }
              },
              "query"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "temp_lang_folders/cs/f3588323668fef37276b6990d4325b037becc09b_DBFacade.cs",
                "start": {
                  "line": 9,
                  "col": 35,
                  "offset": 358
                },
                "end": {
                  "line": 9,
                  "col": 40,
                  "offset": 363
                }
              },
              "query"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn",
      "path": "temp_lang_folders/c/e4629cd959f420c717b73f3a122945873db3f8ed_wordguess.c",
      "start": {
        "line": 10,
        "col": 5,
        "offset": 221
      },
      "end": {
        "line": 10,
        "col": 25,
        "offset": 241
      },
      "extra": {
        "metavars": {},
        "message": "Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.",
        "metadata": {
          "cwe": [
            "CWE-676: Use of Potentially Dangerous Function"
          ],
          "references": [
            "http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html"
          ],
          "category": "security",
          "technology": [
            "c"
          ],
          "confidence": "LOW",
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Dangerous Method or Function"
          ],
          "source": "https://semgrep.dev/r/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn",
          "shortlink": "https://sg.run/nd1g",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 8836,
              "rule_id": "AbUzPd",
              "rv_id": 945173,
              "url": "https://semgrep.dev/playground/r/zyTlkWW/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn",
              "version_id": "zyTlkWW"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "beddde636f9dbc3a36c1494b69631e025dc36003200a7d978db34d5857a17f9c161f343ea2543adbb6febdaeb73e5d31657f49433607dd917e145e9b599a8bd9_0",
        "lines": "    scanf(\" %c\", &guess); // Use \" %c\" to skip whitespace",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    }
  ]
}